<?phpnamespace backend\controllers;use Yii;use yii\web\Controller;use yii\filters\AccessControl;use yii\filters\VerbFilter;use yii\web\UploadedFile;use backend\models\SnlArticoli;use backend\models\SnlArticoliSearch;use backend\models\SnlCategorie;use backend\models\SnlCategorieSearch;use backend\models\SnlEdizione;use backend\models\SnlNominativi;use backend\models\SnlAllegati;use backend\models\SnlContest;use backend\models\SnlCommenti;use backend\models\SnlSocial;use backend\models\SnlArticoliCommenti;use backend\models\SnlPartner;use backend\models\SnlGiudici;use backend\models\SnlArtisti;use backend\models\MediaSanLorenzoUploadForm;use kartik\mpdf\Pdf;/** * AllegatiController implements the CRUD actions for Allegati model. */class SanlorenzoController extends Controller{    /**     * @inheritDoc     */    public function behaviors()    {        return array_merge(            parent::behaviors(),            [                'verbs' => [                    'class' => VerbFilter::className(),                    'actions' => [                        'delete' => ['POST'],                    ],                ],                'access' => [                    'class' => AccessControl::className(),                    'rules' => [                        [                            'actions' => ['login', 'error'],                            'allow' => true,                        ],                        [                            'actions' => [],//All page                            'allow' => true,                            'roles' => ['Super User', 'San Lorenzo'],                        ],                    ],                ],            ]        );    }        /**     *      * @param type $action     * @return boolean     */    public function beforeAction($action) {        if(parent::beforeAction($action)){            $this->layout = "sanlorenzo";            return true;        }                return false;    }        /**     * Return index page for San Lorenzo administrator     *      * @return mixed     */    public function actionIndex(){        return $this->render('index');    }        /**     * Create new article     *      * @return mixed     */    public function actionNuovoArticolo(){        $articles = new SnlArticoli();        $uploadForm = new MediaSanLorenzoUploadForm();                if(Yii::$app->request->isPost){            if($articles->load(Yii::$app->request->post())){                                $articles->edizione = $articles->edizione <> 0 ? $articles->edizione : null;                                //Upload cover's image only if has been sent an image                $uploadForm->mediaFile = UploadedFile::getInstance($uploadForm, 'mediaFile');                                if($uploadForm->mediaFile <> "" || isset($uploadForm->mediaFile) || !empty($uploadForm->mediaFile)){                    if($return = $uploadForm->upload() ){                        $articles->immagine_in_evidenza = $return['uploadDirectory'].$return['fileName'].".".$return['extension'];                    }                }                /////////////// end upload                                //Save article                if($articles->save()){                    Yii::$app->session->setFlash("success", Yii::t('app', 'Articolo salvato con successo'));                    return $this->redirect(['/sanlorenzo/all-articles']);                }                //////////////            }        }        return $this->render('articoli/create', [            'articles'      => $articles,            'uploadForm'    => $uploadForm,            'type'          => 'create',        ]);    }        /**     * Show all articles     *      * @return mixed     */    public function actionAllArticles(){                $searchModel = new SnlArticoliSearch();        $dataProvider = $searchModel->search($this->request->queryParams);                return $this->render('articoli/all', [            'searchModel'  => $searchModel,            'dataProvider' => $dataProvider,        ]);    }        /**     * Update article     *      * @param integer $id     * @return mixed     */    public function actionArticoliUpdate($id){        $articles      = $this->findModelArticoli($id);        $uploadForm = new MediaSanLorenzoUploadForm();                if(Yii::$app->request->isPost){                        if($articles->load(Yii::$app->request->post())){                                //Upload new image                $uploadForm->mediaFile = UploadedFile::getInstance($uploadForm, 'mediaFile');                                if($uploadForm->mediaFile <> "" || isset($uploadForm->mediaFile) || !empty($uploadForm->mediaFile)){                    if($return = $uploadForm->upload() ){                        //Delete old image                        if(file_exists($this->findModelArticoli($id)->immagine_in_evidenza)){                            unlink($this->findModelArticoli($id)->immagine_in_evidenza);                        }                        //////                        $articles->immagine_in_evidenza = $return['uploadDirectory'].$return['fileName'].".".$return['extension'];                    }                }                ////End upload                                if($articles->save()){                    Yii::$app->session->setFlash("success", Yii::t('app', 'Articolo modificato con successo'));                    return $this->redirect(['/sanlorenzo/all-articles']);                }            }        }                return $this->render('articoli/create', [            'articles'   => $articles,            'uploadForm' => $uploadForm,            'type'       => 'update',        ]);    }        /**     * Delete an article by id     *      * @param integer $id     * @return mixed     */    public function actionArticoliDelete($id){                if(file_exists($this->findModelArticoli($id)->immagine_in_evidenza)){            unlink($this->findModelArticoli($id)->immagine_in_evidenza);        }        $this->findModelArticoli($id)->delete();                Yii::$app->session->setFlash("success", Yii::t('app', 'Articolo eliminato con successo'));                return $this->redirect(['sanlorenzo/all-articles']);    }        /**     * Show all categories     *      * @return mixed     */    public function actionCategorieArticoli() {        $searchModel = new SnlCategorieSearch();        $dataProvider = $searchModel->search($this->request->queryParams);                return $this->render('categorie/index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }        /**     * Show all categories     *      * @return mixed     */    public function actionCategoriaCreate() {        $category = new SnlCategorie();                if(Yii::$app->request->isPost){                        if($category->load(Yii::$app->request->post()) && $category->save()){                return $this->redirect(['/sanlorenzo/categorie-articoli']);            }                    }                return $this->render('categorie/create', [            'category' => $category,            'type'  => 'create'        ]);    }        /**     * Create new category     *      * @param int $id Category id     * @return mixed     */    public function actionCategorieUpdate($id){        $category = $this->findModelCategoria($id);                if(Yii::$app->request->isPost){                        if($category->load(Yii::$app->request->post()) && $category->save()){                return $this->redirect(['/sanlorenzo/categorie-articoli']);            }                    }                return $this->render('categorie/create', [            'category'  => $category,            'type'      => 'update',        ]);    }        /**     * Create new event     *      * @return type     */    public function actionCreateEvent(){        $model = new SnlEdizione();                if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) && $model->save()){                $model->anno = date('Y');                                Yii::$app->session->setFlash('success', Yii::t('app', 'Evento creato con successo'));                                return $this->redirect(['sanlorenzo/show-events',                     'model' => $model,                    'type'  => 'update',                ]);            }        }                return $this->render('events/index', [            'model' => $model,            'type'  => 'create',        ]);    }        /************************ CONTEST ************************/    /**     * Show last contest     *      * @param int $id     * @retur mixed     */    public function actionViewContest($id){        $model = SnlContest::findOne($id);        $old_model = SnlContest::findOne($id);                if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post())){                $model->allegato_a = $old_model->allegato_a;                $model->allegato_b = $old_model->allegato_b;                $model->allegato_c_minorenni = $old_model->allegato_c_minorenni;                $model->allegato_c_maggiorenni = $old_model->allegato_c_maggiorenni;                $model->regolamento = $old_model->regolamento;                                //Allegato A                $allegato = UploadedFile::getInstance($model, 'allegato_a');                if($allegato <> null){                    $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                    $allegato->saveAs($filename);                    $model->allegato_a = $filename;                }                //Allegato B                $allegato = UploadedFile::getInstance($model, 'allegato_b');                if($allegato <> null){                    $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                    $allegato->saveAs($filename);                    $model->allegato_b = $filename;                }                //Allegato C Minorenni                $allegato = UploadedFile::getInstance($model, 'allegato_c_minorenni');                if($allegato <> null){                    $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                    $allegato->saveAs($filename);                    $model->allegato_c_minorenni = $filename;                }                //Allegato C Maggiorenni                $allegato = UploadedFile::getInstance($model, 'allegato_c_maggiorenni');                if($allegato <> null){                    $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                    $allegato->saveAs($filename);                    $model->allegato_c_maggiorenni = $filename;                }                //Regolamento                $allegato = UploadedFile::getInstance($model, 'regolamento');                if($allegato <> null){                    $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                    $allegato->saveAs($filename);                    $model->regolamento = $filename;                }                                if($model->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Contest salvato con successo'));                    return $this->redirect(['sanlorenzo/view-contest',                        'id'    => $id,                    ]);                }            }        }                return $this->render('contest/index', [            'model' => $model,            'type'  => 'update',        ]);    }        /**     * Create new context     *      * @return mixed     */    public function actionCreateContest(){        $model = new SnlContest();                        if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) ){                //Allegato A                $allegato = UploadedFile::getInstance($model, 'allegato_a');                $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                $allegato->saveAs($filename);                $model->allegato_a = $filename;                //Allegato B                $allegato = UploadedFile::getInstance($model, 'allegato_b');                $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                $allegato->saveAs($filename);                $model->allegato_b = $filename;                //Allegato C Minorenni                $allegato = UploadedFile::getInstance($model, 'allegato_c_minorenni');                $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                $allegato->saveAs($filename);                $model->allegato_c_minorenni = $filename;                //Allegato C Maggiorenni                $allegato = UploadedFile::getInstance($model, 'allegato_c_maggiorenni');                $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                $allegato->saveAs($filename);                $model->allegato_c_maggiorenni = $filename;                //Regolamento                $allegato = UploadedFile::getInstance($model, 'regolamento');                $filename = "sanlorenzo/pdf_uploads/".DIRECTORY_SEPARATOR.md5($allegato->baseName).md5(date('YmdHmi')).".".$allegato->extension;                $allegato->saveAs($filename);                $model->regolamento = $filename;                                if($model->save()){                                    Yii::$app->session->setFlash('success', Yii::t('app', 'Contest salvato con successo'));                                    return $this->redirect(['view-contest', 'id' => $model->id]);                                    }            }                        /*            echo "<pre>";            print_r($model);            echo "</pre>";            */        }                return $this->render('contest/index', [            'model' => $model,            'type' => 'create',        ]);    }        /**     * Delete contest     *      * @param int $id     */    public function actionDeleteContest($id){        SnlContest::findOne($id)->delete();                Yii::$app->session->setFlash('success', Yii::t('app', 'Contest salvato con successo'));        return $this->redirect(['sanlorenzo/index']);    }    /************************ END CONTEST ************************/        /**     * Update an event     *      * @return mixed     */    public function actionEventUpdate($id){        $model = SnlEdizione::findOne($id);                if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) && $model->save()){                $model->anno = date('Y');                                Yii::$app->session->setFlash('success', Yii::t('app', 'Evento creato con successo'));                                return $this->redirect(['sanlorenzo/show-events',                     'model' => $model,                    'type'  => 'update',                ]);            }        }                return $this->render('events/index', [            'model' => $model,            'type'  => 'create',        ]);    }        /**     * Create new event     *      * @return type     */    public function actionEventDelete($id){        $model = SnlEdizione::findOne($id)->delete();        Yii::$app->session->setFlash("success", Yii::t('app', 'Evento eliminato con successo'));                return $this->redirect(['/sanlorenzo/show-events']);    }        /**     * Show all editions     *      * @return mixed     */    public function actionShowEvents(){        $searchModel = new \backend\models\SnlEdizioneSearch();        $dataProvider = $searchModel->search($this->request->queryParams);                return $this->render('events/all', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }        /*********************** CONCORRENTI ***********************/    /**     * Show all subscribers     *      * @return mixed     */    public function actionSubscribers(){        $searchModel = new \backend\models\SnlConcorrentiSearch();        $dataProvider = $searchModel->search($this->request->queryParams);                return $this->render('concorrenti/all', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }        /**     * Show all subscribers     *      * @param int $id     * @return mixed     * @throws NotFoundHttpException     */    public function actionConcorrentiView($id){        $contest_id = SnlContest::findOne(                                SnlEdizione::find()->orderBy(['anno' => SORT_DESC])->one()->contest                            )->id;                $model = $this->findModelConcorrenti($id);        $componenti_search = new \backend\models\SnlNominativiSearch();        $componenti = $componenti_search->searchWithConcorrenteId($this->request->queryParams, $id);        $allegati = SnlAllegati::find()->where(['concorrente' => $id])                                       ->andWhere(['contest' => $contest_id])                                       ->orderBy(['nome_allegato' => SORT_ASC])                                        ->all();                return $this->render('concorrenti/view', [            'model'         => $model,            'allegati'      => $allegati,            'componenti'    => $componenti,            'componenti_search' => $componenti_search,        ]);    }        /**     * Creazione nuovo concorrente     *      * @return mixed     */    public function actionConcorrentiCreate(){        $model          = new \backend\models\SnlConcorrenti();        $edizione       = SnlEdizione::findOne(['anno' => date('Y')]);        $contest        = SnlContest::findOne($edizione);                $allegatoA      = new \backend\models\SnlAllegatoA();        $allegatoB      = new \backend\models\SnlAllegatoB();        $allegatoC      = new \backend\models\SnlAllegatoC();        $bonifico       = new \backend\models\Bonifico();                if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post())){                                $allegatoA->allegatoA = UploadedFile::getInstances($allegatoA, 'allegatoA');                $allegatoB->allegatoB = UploadedFile::getInstances($allegatoB, 'allegatoB');                $allegatoC->allegatoC = UploadedFile::getInstances($allegatoC, 'allegatoC');                $bonifico->bonifico   = UploadedFile::getInstances($bonifico, 'bonifico');                                if(($outA = $allegatoA->upload())&&                         ($outB = $allegatoB->upload()) &&                        ($outC = $allegatoC->upload()) &&                         ($outBonifico = $bonifico->upload())                ){                    //Model want a string value                    $model->componenti = implode(", ", $model->componenti);                    $model->date_di_nascita = implode(", ", $model->date_di_nascita);                    $model->strumenti = implode(", ", $model->strumenti);                                        $model->save();//Save model                                        //Add names                    if($model->componenti <> ""){                        $names = explode(",", $model->componenti);                        for($i=0; $i< sizeof($names); $i ++){                            $nominativi = new SnlNominativi();                            $nominativi->nominativo = $names[$i];                            $nominativi->data_di_nascita = explode(",", $model->date_di_nascita)[$i];                            $nominativi->strumento = explode(",", $model->strumenti)[$i];                            $nominativi->ultima_modifica = $nominativi->data_inserimento = date('Y-m-d');                            $nominativi->concorrente = $model->id;                            $nominativi->contest = $model->contest;                                                        $nominativi->save();//Save name                        }                    }                                        foreach ($outA aS $a){                        $allegato = new SnlAllegati();                        $allegato->nome_allegato = "Allegato A";                        $allegato->allegato = Yii::$app->params['backendUrl'].$a['uploadDirectory'].$a['fileName'].".".$a['extension'];                        $allegato->concorrente = $model->id;                        $allegato->contest = $contest->id;                        $allegato->save();                    }                                        foreach ($outB aS $b){                        $allegato = new SnlAllegati();                        $allegato->nome_allegato = "Allegato B";                        $allegato->allegato = Yii::$app->params['backendUrl'].$b['uploadDirectory'].$b['fileName'].".".$b['extension'];                        $allegato->concorrente = $model->id;                        $allegato->contest = $contest->id;                        $allegato->save();                    }                                        foreach ($outC aS $c){                        $allegato = new SnlAllegati();                        $allegato->nome_allegato = "Allegato C";                        $allegato->allegato = Yii::$app->params['backendUrl'].$c['uploadDirectory'].$c['fileName'].".".$c['extension'];                        $allegato->concorrente = $model->id;                        $allegato->contest = $contest->id;                        $allegato->save();                    }                    //Save bonifico on Database                    foreach ($outBonifico aS $c){                        $allegato = new SnlAllegati();                        $allegato->nome_allegato = "Bonifico";                        $allegato->allegato = Yii::$app->params['backendUrl'].$c['uploadDirectory'].$c['fileName'].".".$c['extension'];                        $allegato->concorrente = $model->id;                        $allegato->contest = $contest->id;                        $allegato->save();                    }                }                                return $this->redirect(['/sanlorenzo/concorrenti-view', 'id' => $model->id]);            }        }                return $this->render('concorrenti/create', [            'model' => $model,            'contest' => $contest,            'edizione' => $edizione,            'allegatoA'     => $allegatoA,            'allegatoB'     => $allegatoB,            'allegatoC'     => $allegatoC,            'bonifico'      => $bonifico,        ]);    }        /**     * Aggiornamento dati di un concorrente     *      * @param int $id ID del concorrente     */    public function actionConcorrentiUpdate($id){        $model = \backend\models\SnlConcorrenti::findOne($id);        $edizione       = SnlEdizione::findOne(['anno' => date('Y')]);        $contest        = SnlContest::findOne($edizione);                if(Yii::$app->request->isPost){            if( $model->load(Yii::$app->request->post())){                                //Compatibilità con l'action create                $model->componenti = "";                $model->date_di_nascita = "";                $model->strumenti = "";                                if($model->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Dati concorrente aggiornati con successo'));                                        return $this->redirect(['/sanlorenzo/concorrenti-view', 'id' => $model->id]);                }            }                                            echo "<pre>";                print_r(Yii::$app->request->post());                print_r($model->nome);                print_r($model);                echo "</pre>";                            return;        }                return $this->render('concorrenti/update', [            'model' => $model,            'contest' => $contest,            'edizione' => $edizione,        ]);    }        /**     * Refresh Allegato A PDF     *      * @param int $id Concorrente ID     */    public function actionConcorrentiRefreshAllegatoA($id){        $contest_id = SnlContest::findOne(                                SnlEdizione::find()->orderBy(['anno' => SORT_DESC])->one()->contest                            )->id;                $model = $this->findModelConcorrenti($id);        $componenti = SnlNominativi::find()->where(['concorrente' => $id])->andWhere(['contest' => $contest_id])->all();                $allegati = SnlAllegati::find()->where(['concorrente' => $id])                                       ->andWhere(['contest' => $contest_id])                                       ->andWhere(['nome_allegato' => 'Allegato A'])                                       ->orderBy(['nome_allegato' => SORT_ASC])                                        ->all();                        /*echo "<pre>";        //print_r(explode("https://www.teatralmentegioia.it/", $allegati[0]->allegato)[1]);         print_r($allegati);        echo "</pre>";        return;*/                //Generate Allegato A        $heading = $this->renderPartial('concorrenti/_pdf-heading');        $content = $this->renderPartial('concorrenti/_iscrizioniPdf', [            'componenti' => $componenti,        ]);        $footer = $this->renderPartial('concorrenti/_pdf-footer');        $cssInline = <<<CSS            table{                width: 100%;            }            .table, .table td, .table th{                border: 1px solid;                border-collapse: collapse;            }            th{                color: #F77736;            }            td, th{                padding: 10px;            }            img{                width: 50px;            }CSS;        $allegato_name = 'media_uploads/' . DIRECTORY_SEPARATOR                                        . sha1(uniqid($model->nome_gruppo . "_" )). random_int(0, PHP_INT_MAX).".pdf";                $pdf = new Pdf([            'filename' => $allegato_name,            'marginTop' => '30',            'marginHeader' => '0',            'marginBottom' => '50',            // set to use core fonts only            'mode' => Pdf::MODE_CORE,             // A4 paper format            'format' => Pdf::FORMAT_A4,             // portrait orientation            'orientation' => Pdf::ORIENT_PORTRAIT,             // stream to browser inline            'destination' => Pdf::DEST_FILE,            // your html content input            'content' => $content,              // format content from your own css file if needed or use the            // enhanced bootstrap css built by Krajee for mPDF formatting             'cssFile' => '@vendor/kartik-v/yii2-mpdf/src/assets/kv-mpdf-bootstrap.min.css',            // any css to be embedded if required            'cssInline' => $cssInline,              // set mPDF properties on the fly            'options' => ['title' => Yii::t('app', 'Iscrizione Cantando sotto le stelle_' . $model->nome_gruppo),],             // call mPDF methods on the fly            'methods' => [                 'SetHTMLHeader' => $heading,                'SetHTMLFooter' => $footer,            ]        ]);                $ext = explode(".", $allegati[0]->allegato);        if(end($ext)<>"pdf"){            $pdf->render();                        $filename = time().'.pdf';            $img  = new \Imagick([$allegato_name, $allegati[0]->allegato]);            $img->setImageFormat('pdf');            $img->writeImages($filename, true);             $path = "../../../crm/backend/web/".$filename;        }else{            $pdf->addPdfAttachment("../../../".explode("https://www.teatralmentegioia.it/", $allegati[0]->allegato)[1]);            $pdf->render();                        $filename = $allegato_name;        }                header('Content-type: application/pdf');                echo file_get_contents($filename);                unlink($filename);    }        /**     * Delete subscriber     *      * @param int $id     * @throws NotFoundHttpException     */    public function actionConcorrentiDelete($id){        $model = $this->findModelConcorrenti($id);        $contest_id = SnlContest::findOne(                                SnlEdizione::find()->orderBy(['anno' => SORT_DESC])->one()->contest                            )->id;        $allegati = SnlAllegati::find()->where(['concorrente' => $id])                                       ->andWhere(['contest' => $contest_id])                                       ->orderBy(['nome_allegato' => SORT_ASC])                                        ->all();        $nominativi = SnlNominativi::find()->where(['concorrente' => $id])                                           ->andWhere(['contest' => $contest_id])                                           ->all();                //Delete attachment        foreach ($allegati as $allegato){            $allegato->delete();        }        //Delete nominativos        foreach ($nominativi as $nominativo){            $nominativo->delete();        }        //Delete subscriber        $model->delete();        Yii::$app->session->setFlash("success", Yii::t('app', 'Concorrente eliminato con successo'));                return $this->redirect(['/sanlorenzo/subscribers']);    }    /********************** END CONCORRENTI ********************/        /******************* NOMINATIVI ****************************/    public function actionNominativoCreate($concorrente_id=0){        $model = new SnlNominativi();                if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post())){                $model->data_inserimento = $model->ultima_modifica = date('Y-m-d');                $model->contest = \backend\models\SnlContest::findOne(\backend\models\SnlEdizione::findOne(['anno' => date('Y')]))->id;                                if($model->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Componente aggiunto con successo'));                                        return $this->redirect(['concorrenti-view', 'id' => $concorrente_id]);                }                echo "<pre>";                print_r($model);                echo "</pre>";                                return;            }        }                return $this->render('nominativi/create',[            'model' => $model,            'concorrente_id' => $concorrente_id,        ]);    }    /**     * Aggiorna i dati di un nominativo     *      * @param int $id  ID del componente     * @param int $concorrente_id  ID del concorrente iscritto     * @return mixed     */    public function actionNominativiUpdate($id, $concorrente_id){        $model = SnlNominativi::findOne($id);                if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) && $model->save()){                                Yii::$app->session->setFlash('success', Yii::t('app', 'Componente aggiornato con successo'));                                return $this->redirect(['sanlorenzo/concorrenti-view',                     'model' => $model,                    'id' => $concorrente_id,                                    ]);            }        }                return $this->render('nominativi/update', [            'model' => $model,            'concorrente_id'  => $concorrente_id,        ]);    }        /**     * Elimina un componente     *      * @param int $id  ID del componente     * @param int $concorrente_id  ID del concorrente iscritto     * @return mixed     */    public function actionNominativiDelete($id, $concorrente_id){        \backend\models\SnlNominativi::findOne($id)->delete();                Yii::$app->session->setFlash('success', Yii::t('app', 'Componente eliminato con successo'));                return $this->redirect(['sanlorenzo/concorrenti-view',             'id' => $concorrente_id,        ]);    }    /****************** END NOMINATIVI **********************/        /**     * Create new category     *      * @return mixed     * @throws NotFoundHttpException     */    public function actionCategorieDelete($id){                $this->findModelCategoria($id)->delete();        Yii::$app->session->setFlash("success", Yii::t('app', 'Categoria eliminata con successo'));                return $this->redirect(['/sanlorenzo/categorie-articoli']);    }        /********************** COMMENTS ********************/    /**     * Show all article     *      * @return mixed     */    public function actionCommenti() {        $searchModel = new SnlArticoliSearch();        $dataProvider = $searchModel->search($this->request->queryParams);                return $this->render('commenti/all', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     *      * @param int $id     * @return mixed     */    public function actionArticleCommentsView($id){        $article = $this->findModelArticoli($id);        $comments = SnlArticoliCommenti::find()->where(['articolo' => $article->id])->all();                return $this->render('commenti/article', [            'article' => $article,            'comments' => $comments,        ]);    }        /**     * Approve comment     *      * @param int $commento     * @param int $articolo     * @return mixed     */    public function actionArticleCommentApprove($commento, $articolo){        $comment = $this->findModelCommenti($commento);        $comment->approvato = SnlCommenti::APPROVED;        $comment->save();                Yii::$app->session->setFlash('success', Yii::t('app', 'Commento segnato come approvato!'));                return $this->redirect(['/sanlorenzo/article-comments-view', 'id' => $articolo]);    }        /**     * Approve comment     *      * @param int $commento     * @param int $articolo     * @return mixed     */    public function actionArticleCommentReject($commento, $articolo){        $comment = $this->findModelCommenti($commento);        $comment->approvato = SnlCommenti::REJECTED;        $comment->save();                Yii::$app->session->setFlash('success', Yii::t('app', 'Commento segnato come rifiutato!'));                return $this->redirect(['/sanlorenzo/article-comments-view', 'id' => $articolo]);    }    /********************** END COMMENTS ********************/    /********************** SETTINGS ********************/    public function actionSettings(){        $social = $this->findAllSocial();        $new_social = new SnlSocial();                if(Yii::$app->request->isPost){            $post = Yii::$app->request->post();                        $size = sizeof($post['SnlSocial']['social']);            $social_arr = [];            $social = [];            $icona  = [];            $link   = [];                        for($pos = 0; $pos<$size; $pos++){                if(empty($post['SnlSocial']['social'][$pos])){                    continue;                }                                $social_arr[$pos] = new SnlSocial();                if( $post['SnlSocial']['id'][$pos] <> 0){//for update                    $social_arr[$pos] = SnlSocial::findOne($post['SnlSocial']['id'][$pos]);                }                                    $social_arr[$pos]->social   = $post['SnlSocial']['social'][$pos];                $social_arr[$pos]->icona    = $post['SnlSocial']['icona'][$pos];                $social_arr[$pos]->link     = $post['SnlSocial']['link'][$pos];            }                        $save = false;                        foreach ($social_arr as $s){                if($s->save()){                    $save = true;                }else{                    $save = false;                }            }                        if($save){                Yii::$app->session->setFlash('success', Yii::t('app', 'Impostazioni salvate!'));                        return $this->redirect(['/sanlorenzo/settings']);            }        }                return $this->render('settings/index', [            'social'        => $social,            'new_social'    => $new_social,        ]);    }    /********************** END SETTINGS ********************/        /**     * Lists all Partner models.     *     * @return string     */    public function actionPartnerIndex()    {        $searchModel = new \backend\models\SnlPartnerSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        return $this->render('partner/all', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Displays a single Partner model.     * @param int $id ID     * @return string     * @throws NotFoundHttpException if the model cannot be found     */    public function actionPartnerView($id)    {        return $this->render('view', [            'model' => $this->findModel($id),        ]);    }    /**     * Aggiunge un nuovo partner al sistema     *      * @param int $sito Indica il sito di riferimento     * @return mixed     */    public function actionPartnerCreate()    {        $model = new SnlPartner();        $max = (SnlPartner::find()->max("ordinamento"))+1;        //$upload = new Uplo                if ($this->request->isPost) {            if ($model->load($this->request->post()) /*&& $model->save()*/) {                $upload = \yii\web\UploadedFile::getInstance($model, 'logo');                $file = 'sanlorenzo'.DIRECTORY_SEPARATOR.'media_uploads'.DIRECTORY_SEPARATOR.md5($upload->baseName.date('d-m-YH:i:s')).".".$upload->extension;                $upload->saveAs($file);                $file = \Yii::$app->params['site_protocol'].\Yii::$app->params['backendWeb'].$file;                                $model->logo = $file;                $model->contest = \backend\models\SnlContest::findOne(\backend\models\SnlEdizione::findOne(['anno' => date('Y')]))->id;                                if($model->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Partner aggiunto con successo'));                                        return $this->redirect(['sanlorenzo/partner-index'  ]);                }            }        } else {            $model->loadDefaultValues();        }        return $this->render('partner/create', [            'model'     => $model,            'max'       => $max,        ]);    }    /**     * Updates an existing Partner model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param int $id ID     * @return string|\yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionPartnerUpdate($id)    {        $model = $this->findModelPartner($id);        $old_model = $this->findModelPartner($id);                        if ($this->request->isPost && $model->load($this->request->post())) {            if(($upload = \yii\web\UploadedFile::getInstance($model, 'logo')) ){                $file = 'sanlorenzo'.DIRECTORY_SEPARATOR.'media_uploads'.DIRECTORY_SEPARATOR.md5($upload->baseName.date('d-m-YH:i:s')).".".$upload->extension;                $upload->saveAs($file);                $file = \Yii::$app->params['site_protocol'].\Yii::$app->params['backendWeb'].$file;                $model->logo = $file;            }else{                $model->logo = $old_model->logo;            }                        if($model->save()){                Yii::$app->session->setFlash('success', Yii::t('app', 'Partner aggiornato con successo'));                return $this->redirect(['partner-index']);            }        }        return $this->render('partner/update', [            'model' => $model,            'max'       => $model->ordinamento,        ]);    }    /**     * Deletes an existing Partner model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $id ID     * @return \yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionPartnerDelete($id)    {        $this->findModelPartner($id)->delete();        Yii::$app->session->setFlash('success', Yii::t('app', 'Partner rimosso con successo'));                return $this->redirect(['partner-index']);    }    ////////// END PARTNER //////////            /////////// JUDGE ///////////    public function actionGiudiciIndex(){        $searchModel = new \backend\models\SnlGiudiciSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        return $this->render('giudici/index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Aggiunge un nuovo partner al sistema     *      * @param int $sito Indica il sito di riferimento     * @return mixed     */    public function actionGiudiceCreate()    {        $model = new SnlGiudici();                if ($this->request->isPost) {            if ($model->load($this->request->post()) /*&& $model->save()*/) {                if(($upload = \yii\web\UploadedFile::getInstance($model, 'foto')) != null){                    $file = 'sanlorenzo'.DIRECTORY_SEPARATOR.'media_uploads'.DIRECTORY_SEPARATOR.md5($upload->baseName.date('d-m-YH:i:s')).".".$upload->extension;                    $upload->saveAs($file);                    $file = \Yii::$app->params['site_protocol'].\Yii::$app->params['backendWeb'].$file;                    $model->foto = $file;                }else{                    $model->foto = "";                }                                $model->contest = \backend\models\SnlContest::findOne(\backend\models\SnlEdizione::findOne(['anno' => date('Y')]))->id;                                if($model->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Partner aggiunto con successo'));                                        return $this->redirect(['sanlorenzo/giudici-index'  ]);                }            }        } else {            $model->loadDefaultValues();        }        return $this->render('giudici/create', [            'model'     => $model,        ]);    }        /**     * Updates an existing Judge model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param int $id ID     * @return string|\yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionGiudiciUpdate($id)    {        $model = $this->findModelGiudici($id);        $old_model = $this->findModelGiudici($id);                        if ($this->request->isPost && $model->load($this->request->post())) {            if(($upload = \yii\web\UploadedFile::getInstance($model, 'foto')) ){                $file = 'sanlorenzo'.DIRECTORY_SEPARATOR.'media_uploads'.DIRECTORY_SEPARATOR.md5($upload->baseName.date('d-m-YH:i:s')).".".$upload->extension;                $upload->saveAs($file);                $file = \Yii::$app->params['site_protocol'].\Yii::$app->params['backendWeb'].$file;                $model->foto = $file;            }else{                $model->foto = $old_model->foto;            }                        if($model->save()){                Yii::$app->session->setFlash('success', Yii::t('app', 'Partner aggiornato con successo'));                return $this->redirect(['giudici-index']);            }        }        return $this->render('giudici/update', [            'model' => $model,        ]);    }    /**     * Deletes an existing Judge model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $id ID     * @return \yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionGiudiciDelete($id)    {        $this->findModelGiudici($id)->delete();        Yii::$app->session->setFlash('success', Yii::t('app', 'Partner rimosso con successo'));                return $this->redirect(['giudici-index']);    }    ///////// END JUDGE /////////            /////////// ARTIST ///////////    public function actionArtistiIndex(){        $searchModel = new \backend\models\SnlArtistiSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        return $this->render('artisti/index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Aggiunge un nuovo artista al sistema     *      * @param int $sito Indica il sito di riferimento     * @return mixed     */    public function actionArtistaCreate()    {        $model = new SnlArtisti();                if ($this->request->isPost) {            if ($model->load($this->request->post())) {                                $model->contest = \backend\models\SnlContest::findOne(\backend\models\SnlEdizione::findOne(['anno' => date('Y')]))->id;                                if($model->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Partner aggiunto con successo'));                                        return $this->redirect(['sanlorenzo/artisti-index'  ]);                }            }        } else {            $model->loadDefaultValues();        }        return $this->render('artisti/create', [            'model'     => $model,        ]);    }    /**     * Aggiorna un'artista esistente     * Se l'aggiornamwento va a buon fine reindirizza all'elenco degli artisti.     * @param int $id ID     * @return string|\yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionArtistiUpdate($id)    {        $model = $this->findModelArtisti($id);                       if ($this->request->isPost && $model->load($this->request->post())) {                        if($model->save()){                Yii::$app->session->setFlash('success', Yii::t('app', 'Partner aggiornato con successo'));                return $this->redirect(['artisti-index']);            }        }        return $this->render('artisti/update', [            'model' => $model,        ]);    }    /**     * Cancella un'artista.     * @param int $id ID     * @return \yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionArtistiDelete($id)    {        $this->findModelArtisti($id)->delete();        Yii::$app->session->setFlash('success', Yii::t('app', 'Partner rimosso con successo'));                return $this->redirect(['artisti-index']);    }    /////////// END ARTIST ///////////        /****************** STAND ******************/    public function actionStandIndex(){        $searchModel = new \backend\models\SnlStandAlimentariSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        return $this->render('stand_alimentari/index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Creates a new StandAlimentari model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return string|\yii\web\Response     */    public function actionStandCreate()    {        $model = new \backend\models\SnlStandAlimentari();        if ($this->request->isPost) {            if ($model->load($this->request->post())) {                if(($upload = \yii\web\UploadedFile::getInstance($model, 'logo')) ){                    $file = 'sanlorenzo'.DIRECTORY_SEPARATOR.'media_uploads'.DIRECTORY_SEPARATOR.md5($upload->baseName.date('d-m-YH:i:s')).".".$upload->extension;                    $upload->saveAs($file);                    $file = \Yii::$app->params['site_protocol'].\Yii::$app->params['backendWeb'].$file;                    $model->logo = $file;                }                                $model->contest = $contest_id = SnlContest::findOne(SnlEdizione::findOne(['anno' => date('Y')]))->id;                if($model->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Stand alimentare aggiunto con successo'));                    return $this->redirect(['stand-index', 'id' => $model->id]);                }            }        } else {            $model->loadDefaultValues();        }        return $this->render('stand_alimentari/create', [            'model' => $model,        ]);    }    /**     * Updates an existing StandAlimentari model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param int $id ID     * @return string|\yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionStandUpdate($id)    {        $model = $this->findModelStand($id);        $old_model = $this->findModelStand($id);                if ($this->request->isPost && $model->load($this->request->post())) {            if(($upload = \yii\web\UploadedFile::getInstance($model, 'logo')) ){                $file = 'sanlorenzo'.DIRECTORY_SEPARATOR.'media_uploads'.DIRECTORY_SEPARATOR.md5($upload->baseName.date('d-m-YH:i:s')).".".$upload->extension;                $upload->saveAs($file);                $file = \Yii::$app->params['site_protocol'].\Yii::$app->params['backendWeb'].$file;                $model->logo = $file;            }                        if($model->save()){                Yii::$app->session->setFlash('success', Yii::t('app', 'Stand alimentare aggiornato con successo'));                                return $this->redirect(['stand-index', 'id' => $model->id]);            }        }        return $this->render('stand_alimentari/update', [            'model' => $model,        ]);    }    /**     * Deletes an existing StandAlimentari model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $id ID     * @return \yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionStandDelete($id)    {        $this->findModelStand($id)->delete();        return $this->redirect(['stand-index']);    }    /****************** END STAND ******************/    /**     * Finds the StandAlimentari model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return StandAlimentari the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelStand($id)    {        if (($model = \backend\models\SnlStandAlimentari::findOne(['id' => $id])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Artisti model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Artisti the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelArtisti($id)    {        if (($model = SnlArtisti::findOne(['id' => $id])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }        /**     * Finds the Giudici model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Giudici the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelGiudici($id)    {        if (($model = SnlGiudici::findOne(['id' => $id])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Partner model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Partner the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelPartner($id)    {        if (($model = SnlPartner::findOne(['id' => $id])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds all social values.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findAllSocial()    {        if (($model = SnlSocial::find()->all()) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Comment model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelCommenti($id)    {        if (($model = SnlCommenti::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }        /**     * Finds the Media model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelArticoli($id)    {        if (($model = SnlArticoli::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }        /**     * Finds the Categoria model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Allegati the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelCategoria($id)    {        if (($model = SnlCategorie::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Categoria model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Allegati the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelEvents($year)    {        if (($model = SnlEdizione::findOne(['anno' => $year])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Concorrenti model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Allegati the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelConcorrenti($id)    {        if (($model = \backend\models\SnlConcorrenti::findOne(['id' => $id])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Concorrenti model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Allegati the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelNominativi($id)    {        if (($model = \backend\models\SnlNominativi::find()->where(['concorrente' => $id])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }}