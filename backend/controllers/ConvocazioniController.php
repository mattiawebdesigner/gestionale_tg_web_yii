<?phpnamespace backend\controllers;use Yii;use backend\models\Convocazioni;use backend\models\ConvocazioniSearch;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\filters\VerbFilter;use backend\models\TipoVerbali;use kartik\mpdf\Pdf;/** * ConvocazioniController implements the CRUD actions for Convocazioni model. */class ConvocazioniController extends Controller{    /**     * @inheritDoc     */    public function behaviors()    {        return array_merge(            parent::behaviors(),            [                'verbs' => [                    'class' => VerbFilter::className(),                    'actions' => [                        'delete' => ['POST'],                    ],                ],            ]        );    }    /**     * Lists all Convocazioni models.     *     * @return string     */    public function actionIndex(){        $searchModel = new ConvocazioniSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        $dataProvider->setSort(['defaultOrder' => ['data_inserimento' => SORT_DESC]]);                return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Displays a single Convocazioni model.     * @param int $numero_protocollo Numero Protocollo     * @return string     * @throws NotFoundHttpException if the model cannot be found     */    public function actionView($numero_protocollo)    {        $model = $this->findModel($numero_protocollo);        $delega = new \backend\models\Delega();                //Registrazione delega ed invio email        if(Yii::$app->request->isPost){            if($delega->load(Yii::$app->request->post())){                $delega->data_riunione = $model->data;                $delega->delegante = Yii::$app->user->id;                $delega->data_creazione = date('Y-m-d');                $delega->convocazione_id = $model->numero_protocollo;                                if($delega->save()){                                        $delegante  = \backend\models\Utenti::find()->where(['id' => $delega->delegante])->one()->cognome.' '.\backend\models\Utenti::find()->where(['id' => $delega->delegante])->one()->nome;                    $delegato   = \backend\models\Utenti::find()->where(['id' => $delega->delegante])->one()->cognome.' '.\backend\models\Utenti::find()->where(['id' => $delega->delegato])->one()->nome;                                        //Generazione PDF                    $heading = $this->renderPartial('_pdf-heading');                    $content = $this->renderPartial('_iscrizioniPdf', [                        'delegante' => $delegante,                        'delegato'  => $delegato,                        'delega'    => $delega,                    ]);                    $footer = $this->renderPartial('_pdf-footer');                                        $cssInline = <<<CSS                        table{                            width: 100%;                        }                        th{                            color: #F77736;                        }                        td, th{                            padding: 10px;                        }                        img{                            width: 50px;                        }CSS;                                        $allegato_name = 'media_uploads' . DIRECTORY_SEPARATOR                                                    . sha1(uniqid($model->numero_protocollo . "_" )). random_int(0, PHP_INT_MAX).".pdf";                    $pdf = new Pdf([                        'filename' => $allegato_name,                        'marginTop' => '40',                        'marginHeader' => '0',                        'marginBottom' => '50',                        // set to use core fonts only                        'mode' => Pdf::MODE_CORE,                         // A4 paper format                        'format' => Pdf::FORMAT_A4,                         // portrait orientation                        'orientation' => Pdf::ORIENT_PORTRAIT,                         // stream to browser inline                        'destination' => Pdf::DEST_FILE,                        // your html content input                        'content' => $content,                          // format content from your own css file if needed or use the                        // enhanced bootstrap css built by Krajee for mPDF formatting                         'cssFile' => '@vendor/kartik-v/yii2-mpdf/src/assets/kv-mpdf-bootstrap.min.css',                        // any css to be embedded if required                        'cssInline' => $cssInline,                          // set mPDF properties on the fly                        'options' => ['title' => Yii::t('app', 'Delega convocazione_' . $model->numero_protocollo),],                         // call mPDF methods on the fly                        'methods' => [                             'SetHTMLHeader' => $heading,                            'SetHTMLFooter' => $footer,                        ]                    ]);                    // return the pdf output as per the destination setting                    $pdf->render();                                        //Invio email                    $data_delega = date("d-m-Y", strtotime($delega->data_riunione));                    Yii::$app->mailer->compose(['html' =>'layouts/html'], ['content' => <<<TESTO                        Io sottoscritto <b>{$delegante}</b> delego <b>{$delegato}</b> per la riunione che si terr√† in data <b>{$data_delega}</b>TESTO])                    ->setFrom(["noreply-crm@teatralmentegioia.it" => "Teatralmente Gioia"])                    ->setTo([Yii::$app->user->identity->email, Yii::$app->params['email']])                    ->setSubject(Yii::t('app', 'Modulo di delega').' | '. Yii::t('app', 'Gestionale Teatralmente Gioia'))                    ->attach($allegato_name)                    ->send();                                            Yii::$app->session->setFlash('success', Yii::t('app', 'Delega inviata con successo'));                    return $this->redirect(['view',  'numero_protocollo' => $numero_protocollo]);                }            }        }                return $this->render('view', [            'model' => $model,            'delega' => $delega,        ]);    }    /**     * Creates a new Convocazioni model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return string|\yii\web\Response     */    public function actionCreate()    {        $model = new Convocazioni();        if ($this->request->isPost) {            if ($model->load($this->request->post()) && $model->save()) {                return $this->redirect(['view', 'numero_protocollo' => $model->numero_protocollo]);            }        } else {            $model->loadDefaultValues();        }        return $this->render('create', [            'model' => $model,        ]);    }        /**     * Save <b>convocazioni</b> with <b>Ajax</b>     *      * @param type $numero_protocollo     * @return boolean     */    public function actionSave($numero_protocollo = "0"){                if($numero_protocollo === "0"){            //SAVE            $model = new Convocazioni();            $model->data_inserimento = $model->ultima_modifica = date("Y-m-d");        }else{            //UPDATE            $model = $this->findModel($numero_protocollo);        }                        if ($this->request->isPost) {            $model->numero_protocollo = $this->request->post()['numero_protocollo'];            $model->oggetto           = $this->request->post()['oggetto'];            $model->ordine_del_giorno = $this->request->post()['ordine_del_giorno'];            $model->data              = $this->request->post()['data'];            $model->firma             = $this->request->post()['firma'];            $model->tipo              = $this->request->post()['tipo'];            $model->contenuto         = $this->request->post()['contenuto'];                        if($model->save()){                return true;            }        }                return false;    }        /**     * Download generated file     *      * @param int $numero_protocollo     * @return kartik\mpdf\Pdf     */    public function actionDownload($numero_protocollo, $destination = Pdf::DEST_DOWNLOAD){        $model = $this->findModel($numero_protocollo);                $out = TipoVerbali::find()->joinWith('verbalis')                          ->onCondition("tipo = id")                         ->where(['tipo' => $numero_protocollo])                         ->all();                $cssInline = <<<CSS            table{                width: 100%;            }            th{                color: #F77736;            }            td, th{                padding: 10px;            }            img{                width: 50px;            }CSS;                $heading = $this->renderPartial('_pdf-heading');        $content = $this->renderPartial('_pdf',[            'model' => $model,            'out'   => $out,        ]);        $footer = $this->renderPartial('_pdf-footer');                // setup kartik\mpdf\Pdf component        $pdf = new Pdf([            'filename' => "Prot.".$model->numero_protocollo." ".                                    str_replace(" ", "", $model->oggetto)." ".                                     str_replace("/", "", $model->data).".pdf",            'marginLeft' => 10,            'marginRight' => 10,            'marginTop' => 50,            'marginHeader' => 0,            'marginBottom' => 50,            // set to use core fonts only            'mode' => Pdf::MODE_CORE,             // A4 paper format            'format' => Pdf::FORMAT_A4,             // portrait orientation            'orientation' => Pdf::ORIENT_PORTRAIT,             // stream to browser inline            'destination' => $destination,             // your html content input            'content' => $content,              // format content from your own css file if needed or use the            // enhanced bootstrap css built by Krajee for mPDF formatting             'cssFile' => '@vendor/kartik-v/yii2-mpdf/src/assets/kv-mpdf-bootstrap.min.css',            // any css to be embedded if required            'cssInline' => $cssInline,              // set mPDF properties on the fly            'options' => [                'title' => Yii::$app->name,            ],             // call mPDF methods on the fly            'methods' => [                'SetHTMLHeader' => $heading,                'SetHTMLFooter' => $footer,            ]        ]);        // return the pdf output as per the destination setting        return $pdf->render();    }    /**     * Updates an existing Convocazioni model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param int $numero_protocollo Numero Protocollo     * @return string|\yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdate($numero_protocollo)    {        $model = $this->findModel($numero_protocollo);        if ($this->request->isPost && $model->load($this->request->post()) && $model->save()) {            return $this->redirect(['view', 'numero_protocollo' => $model->numero_protocollo]);        }        return $this->render('update', [            'model' => $model,        ]);    }        /**     * Send email     *      * @param int $numero_protocollo     * @return type     */    public function actionSend($numero_protocollo) {        $model = $this->findModel($numero_protocollo);                $searchModel = new \backend\models\SociSearch();                $partnerDataProvider = $searchModel->searchSoci($this->request->queryParams);        $partnerDataProvider->pagination = ['pageSize' => 20];                        if(Yii::$app->request->isPost){                        foreach ($this->request->post()['id'] as $val){                $socio   = \backend\models\Soci::findOne(['id' => $val]);                $oggetto = $model->oggetto;                $pdf     = Yii::$app->params['sito'].\yii\helpers\Url::to(                                    ['download',                                         'numero_protocollo' => $numero_protocollo,                                        'destination' => Pdf::DEST_BROWSER]                                    );                                Yii::$app->mailer->compose(['html' =>'layouts/html'], ['content' => <<<TESTO<h2>$oggetto</h2>Per scaricare la convocazione puoi cliccare sul seguente link:<a href="$pdf">$pdf</a>TESTO])                    ->setFrom(["noreply@teatralmentegioia.it" => "Teatralmente Gioia"])                    ->setTo([trim($socio->email)])                    ->setSubject(Yii::t('app', 'Convocazione assemblea').' | '. Yii::t('app', 'Gestionale Teatralmente Gioia'))                    ->send();            }            Yii::$app->session->setFlash('success', Yii::t('app', 'Convocazione inviata con successo'));                        return $this->redirect(['index']);        }                return $this->render('send', [            'numero_protocollo'     => $numero_protocollo,            'model'                 => $model,            'partner'               => \backend\models\Soci::find()->all(),            'searchModel'           => $searchModel,            'partnerDataProvider'   => $partnerDataProvider,        ]);    }    /**     * Deletes an existing Convocazioni model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $numero_protocollo Numero Protocollo     * @return \yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDelete($numero_protocollo)    {        $this->findModel($numero_protocollo)->delete();        return $this->redirect(['index']);    }    /**     * Finds the Convocazioni model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $numero_protocollo Numero Protocollo     * @return Convocazioni the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModel($numero_protocollo)    {        if (($model = Convocazioni::findOne(['numero_protocollo' => $numero_protocollo])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }}