<?phpnamespace backend\controllers;use Yii;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\web\UploadedFile;use yii\filters\AccessControl;use yii\filters\VerbFilter;use backend\models\Attivita;use backend\models\Media;use backend\models\MediaSearch;use backend\models\MediaUploadForm;/** * MediaController implements the CRUD actions for Media model. */class MediaController extends Controller{    /**     * @inheritDoc     */    public function behaviors()    {        return array_merge(            parent::behaviors(),            [                'verbs' => [                    'class' => VerbFilter::className(),                    'actions' => [                        'delete' => ['POST'],                    ],                ],                'access' => [                    'class' => AccessControl::className(),                    'rules' => [                        [                            'actions' => ['login', 'error'],                            'allow' => true,                        ],                        [                            'actions' => [],//All page                            'allow' => true,                            'roles' => ['Super User', 'event manager'],                        ],                        [                            'actions' => [],//All page                            'allow' => false,                            'roles' => ['Socio'],                        ],                    ],                ],            ]        );    }    /**     * Lists all Media models.     * @return mixed     */    public function actionIndex()    {        $searchModel    = new MediaSearch();        $dataProvider   = $searchModel->search($this->request->queryParams);        $upload         = new MediaUploadForm();        $mediaFile=null;        if (Yii::$app->request->isPost) {            $upload->mediaFile = UploadedFile::getInstance($upload, 'mediaFile');                        echo "<br ><br ><br ><br ><br ><br >";            echo "<pre>";            print_r($upload);            echo "</pre>";            if ($mediaFile = $upload->upload()) {                $media = new Media();                $media->link = $mediaFile['uploadDirectory'].$mediaFile['fileName'].".".$mediaFile['extension'];                $media->nome = $mediaFile['fileName'];                $media->mime = $mediaFile['type'];                if($media->save()){                    return $this->redirect(['index']);                }            }        }        /*return $this->render('index', [            'searchModel'   => $searchModel,            'dataProvider'  => $dataProvider,            'upload'        => $upload,        ]);*/    }    /**     * Displays a single Media model.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionView($id)    {        return $this->render('view', [            'model' => $this->findModel($id),        ]);    }    /**     * Creates a new Media model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return mixed     */    public function actionCreate()    {        $model = new Media();        if ($this->request->isPost) {            if ($model->load($this->request->post()) && $model->save()) {                return $this->redirect(['view', 'id' => $model->id]);            }        } else {            $model->loadDefaultValues();        }        return $this->render('create', [            'model' => $model,        ]);    }    /**     * Updates an existing Media model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdate($id)    {        $model = $this->findModel($id);        if ($this->request->isPost && $model->load($this->request->post()) && $model->save()) {            return $this->redirect(['view', 'id' => $model->id]);        }        return $this->render('update', [            'model' => $model,        ]);    }       /**     * Upload media     *      * @return \yii\web\Response     */    public function actionUpload()    {        $model = new MediaUploadForm();        $mediaFile=null;        if (Yii::$app->request->isPost) {            $model->mediaFile = UploadedFile::getInstance($model, 'mediaFile');            if ($mediaFile = $model->upload()) {                            }        }                $media = new Media();        $media->link = $mediaFile['uploadDirectory'].$mediaFile['fileName'].".".$mediaFile['extension'];        $media->nome = $mediaFile['fileName'];        $media->mime = $mediaFile['type'];        $media->save();        $model = new Attivita();        $upload = new MediaUploadForm();        $media = Media::find()->all();        return $this->redirect(['index',            'model'     => $model,            'media'     => $media,            'upload'    => $upload,        ]);    }    /**     * Deletes an existing Media model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDelete($id)    {        unlink($this->findModel($id)->link);        $this->findModel($id)->delete();                return $this->redirect(['index']);    }    /**     * Finds the Media model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModel($id)    {        if (($model = Media::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }}