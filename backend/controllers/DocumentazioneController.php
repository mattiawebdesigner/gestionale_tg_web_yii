<?phpnamespace backend\controllers;use Yii;use backend\models\Documentazione;use backend\models\DocumentazioneSearch;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\web\UploadedFile;use yii\filters\AccessControl;use yii\filters\VerbFilter;use backend\models\DocumentiUploadForm;use backend\models\DocumentazioneCategorie;/** * DocumentazioneController implements the CRUD actions for Documentazione model. */class DocumentazioneController extends Controller{    /**     * @inheritDoc     */    public function behaviors()    {        return array_merge(            parent::behaviors(),            [                'verbs' => [                    'class' => VerbFilter::className(),                    'actions' => [                        'delete' => ['POST'],                    ],                ],                'access' => [                    'class' => AccessControl::className(),                    'rules' => [                        [                            'actions' => ['login', 'error'],                            'allow' => true,                        ],                        [                            'actions' => [],//All page                            'allow' => true,                            'roles' => ['Super User', 'event manager'],                        ],                        /*[                            'actions' => ['view', 'create', 'update', 'delete'],                            'allow' => false,                            'roles' => ['Socio'],                        ],                        [                            'actions' => ['index', 'socio-view', 'single-view', 'category-socio-all'],                            'allow' => true,                            'roles' => ['Super User', 'event manager', 'Socio'],                        ],*/                    ],                ],            ]        );    }    /**     * Lists all Documentazione models.     * @return mixed     */    public function actionIndex()    {        //Le cartelle altro non sono che le categorie di un documento        $cartelle = DocumentazioneCategorie::find()->where(["<>", "categoria", "Nessuna categoria"])->all();        $documenti = Documentazione::find()->where(['categoria' => 1])->all();                return $this->render('index', [            'cartelle'  => $cartelle,            'documenti' => $documenti,        ]);    }        /**     * Visualizza il contenuto di una categoria     *      * @param int $id Codice della categoria     * @return mixed     */    public function actionFolder($id){        $documenti = Documentazione::find()->where(['categoria' => $id])->all();                return $this->render('folder', [            'id'        => $id,            'documenti' => $documenti,        ]);    }    /**     * Displays a single Documentazione model.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionView($id)    {        return $this->render('view', [            'model' => $this->findModel($id),        ]);    }    /**     * Carica un nuovo documento     *      * @param int $id Codice della categoria     * @return mixed     */    public function actionUpload($id)    {        $model = new Documentazione();        $upload = new DocumentiUploadForm();                if ($this->request->isPost) {            if ($model->load($this->request->post()) /*&& $model->save()*/) {                //Upload file                $upload->mediaFile = UploadedFile::getInstance($upload, 'mediaFile');                if( $mediafile = $upload->upload()){                    $model->mime = $mediafile['type'];                    $model->link = dirname(dirname(dirname(Yii::$app->getHomeUrl())))                                    . DIRECTORY_SEPARATOR                                    . "backend".DIRECTORY_SEPARATOR                                    . "web"                                    . DIRECTORY_SEPARATOR                                    . $mediafile['uploadDirectory']                                    . $mediafile['fileName']                                    . "."                                    .$mediafile['extension'];                    //Save the data                                        if($model->save()){                        return $this->redirect(['folder', 'id' => $id]);                    }                }            }        } else {            $model->loadDefaultValues();        }                return $this->render('create', [            'model'  => $model,            'upload' => $upload,            'id'     => $id,        ]);    }    /**     * Updates an existing Documentazione model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdate($id)    {        $model = $this->findModel($id);        $upload = new DocumentiUploadForm();        if ($this->request->isPost && $model->load($this->request->post())) {            if ($model->load($this->request->post()) /*&& $model->save()*/) {                //Upload file                $upload->mediaFile = UploadedFile::getInstance($upload, 'mediaFile');                if( $mediafile = $upload->upload()){                    $model->mime = $mediafile['type'];                    $model->link = dirname(dirname(dirname(Yii::$app->getHomeUrl())))                    . DIRECTORY_SEPARATOR                    . "backend".DIRECTORY_SEPARATOR                    . "web"                        . DIRECTORY_SEPARATOR                        . $mediafile['uploadDirectory']                        . $mediafile['fileName']                        . "."                            .$mediafile['extension'];                            //Save the data                            if($model->save()) return $this->redirect(['view', 'id' => $model->id]);                }            }        }        return $this->render('update', [            'model'  => $model,            'upload' => $upload,         ]);    }        /**     * Deletes an existing Documentazione model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDelete($id)    {        $this->findModel($id)->delete();                return $this->redirect(['index']);    }        /**     * Show single document for the user     *     * @return mixed     */    public function actionSingleView($id){        $model = Documentazione::find()->where(['id' => $id])->one();               return $this->render('singleView', [            'model' => $model,        ]);    }        /*PAGINE PER I SOCI*/    public function actionCategorySocioAll($cat_id){        $docs = Documentazione::find()->where(['documentazione_categoria_id' => $cat_id])->all();        return $this->render("category-socio-all", [            'docs' => $docs,        ]);    }    /**     * Show all document's for the user     *     * @return mixed     */    public function actionSocioView(){        $model = Documentazione::find()->where(['visibile_socio' => 'yes'])->all();        $categories = DocumentazioneCategorie::find()->all();              return $this->render('socioView', [            'model'     => $model,            'categories' => $categories,        ]);    }    /*----------------------------------------------------------------------------------------------------------------*/        /**     * Finds the Documentazione model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Documentazione the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModel($id)    {        if (($model = Documentazione::findOne($id)) !== null) {            return $model;        }                throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }}