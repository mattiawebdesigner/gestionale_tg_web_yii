<?phpnamespace backend\controllers;use Yii;use backend\models\Utenti;use backend\models\UtentiSearch;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\filters\VerbFilter;use yii\filters\AccessControl;use backend\models\Soci;use backend\models\AuthItem;use backend\models\AuthAssignment;/** * UtentiController implements the CRUD actions for Utenti model. */class UtentiController extends Controller{    /**     * @inheritDoc     */    public function behaviors()    {        return array_merge(            parent::behaviors(),            [                'verbs' => [                    'class' => VerbFilter::className(),                    'actions' => [                        'delete' => ['POST'],                    ],                ],                'access' => [                    'class' => AccessControl::className(),                    'rules' => [                        [                            'actions' => ['login', 'error'],                            'allow' => true,                        ],                        [                            'actions' => [],//All page                            'allow' => true,                            'roles' => ['Super User', 'segreteria'],                        ],                        [                            'actions' => ['profile', 'update-profile-app'],                            'allow' => true,                            'roles' => ['Socio'],                        ],                        [                            'actions' => ['update-profile-app'],                            'allow' => true,                        ],                    ],                ],            ]        );    }    /**     * Lists all Utenti models.     * @return mixed     */    public function actionIndex()    {        $searchModel = new UtentiSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Displays a single Utenti model.     * @param string $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionView($id)    {        $auth_assignment = AuthAssignment::find()->joinWith("user")->where(['user_id' => $id])->all();                return $this->render('view', [            'model'             => $this->findModel($id),            'auth_assignment'   => $auth_assignment,        ]);    }    /**     * Creates a new Utenti model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @param number $id Id of partner, if 0 value: no partner selected      * @return mixed     */    public function actionCreate($id = 0)    {        $model = new Utenti();        $auth_assignment = new AuthAssignment();                if ($this->request->isPost) {            if ($model->load($this->request->post()) && $auth_assignment->load($this->request->post())) {                $original_password = $model->password;                $model->password = md5($model->password);                $model->repeat_password = md5($model->repeat_password);                $model->status = 10;//Active user                if($model->save()) {                    $nome    = $model->nome;                    $cognome = $model->cognome;                    $email   = $model->email;                    $now     = date('d/m/Y H:i:s');                    $link    = Yii::$app->params['backendUrl'];                                        //Send data for email                     Yii::$app->mailer->compose(['html' =>'layouts/html'], ['content' => <<<TESTO<h2>Dati di accesso per il socio: <span style='color: darkred;'>{$nome} {$cognome}</span></h2><ul>    <li><strong>Nome utente: </strong>{$email}</li>    <li><strong>Password: </strong>{$original_password}</li>    <li><strong>Data di creazione: </strong>{$now}</li>    <li><strong>Link di accesso: </strong>{$link}</ul><p>Si consiglia di conservare questa email.</p>TESTO])                    ->setFrom([trim(Yii::$app->params['senderEmail']) => trim(Yii::$app->params['senderName'])])                    ->setTo([trim(Yii::$app->params['supportEmail']), /*trim($email)*/ 'mattia.angelillo@gmail.com'])                    ->setSubject(Yii::t('app', 'Creazione account').' | '. Yii::t('app', 'Gestionale Teatralmente Gioia'))                    ->send();                    //---End send email                    $auth_assignment->user_id = $model->id;                    foreach ($auth_assignment->item_name as $val){                        $auth_assignment_create = new AuthAssignment();                        $auth_assignment_create->created_at = $auth_assignment->created_at;                        $auth_assignment_create->item_name = $val;                        $auth_assignment_create->user_id = $auth_assignment->user_id;                        $auth_assignment_create->save();                    }                    return $this->redirect(['view', 'id' => $model->id]);                }            }        } else {            $model->loadDefaultValues();            $auth_assignment->loadDefaultValues();        }                if( $id <> 0 ){            $socio = Soci::find()->where(['id' => $id])->one();            $model->nome                = $socio->nome;            $model->cognome             = $socio->cognome;            $model->email               = $socio->email;            $model->socio_id            = $socio->id;            $model->indirizzo           = $socio->indirizzo;        }                return $this->render('create', [            'model' => $model,            'ruoli' => AuthItem::find()->all(),            'auth_assignment' => $auth_assignment,        ]);    }    /**     * Updates an existing Utenti model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param string $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdate($id)    {        $model = $this->findModel($id);        $auth_assignment = new AuthAssignment();        $auth_item = AuthItem::find()->asArray()->all();                if ($this->request->isPost && $model->load($this->request->post()) /*&& $model->save()*/) {            $auth_assignment->load($this->request->post());            $old_auth_assignment = AuthAssignment::find()->where(['user_id' => $id])->all();            $tmp_val = [];                        //Delete old value            foreach ($old_auth_assignment as $old_val){                $old_val->delete();            }            //Added new value            foreach ($auth_assignment->item_name as $val){                $auth_assignment_create = new AuthAssignment();                $auth_assignment_create->created_at = date("YmdHis");                $auth_assignment_create->item_name = $val;                $auth_assignment_create->user_id = $id;                $auth_assignment_create->save();            }                        $model->repeat_password = $model->password;            $model->save();                        //$model->save();//Save update            $nome    = $model->nome;            $cognome = $model->cognome;            $email   = $model->email;            $now     = date('d/m/Y H:i:s');            $link    = Yii::$app->params['backendUrl'];            $stato   = ($model->status == Utenti::$ACTIVE) ? Yii::t('app', 'Attivo') : (                            ($model->status == Utenti::$DELETED) ? Yii::t('app', 'Cancellato') : Yii::t('app', 'Inattivo') );                        //Send data for email             Yii::$app->mailer->compose(['html' =>'layouts/html'], ['content' => <<<TESTO<h2>Dati di accesso per l'utente: <span style='color: darkred;'>{$nome} {$cognome}</span></h2><ul>    <li><strong>Nome utente: </strong>{$email}</li>    <li><strong>Data di creazione: </strong>{$now}</li>    <li><strong>Link di accesso: </strong>{$link}    <li><strong>Stato: </strong>{$stato}</ul><p>Si consiglia di conservare questa email.</p>TESTO])                    ->setFrom([Yii::$app->params['senderEmail'] => "Teatralmente Gioia"])                    ->setTo([trim(Yii::$app->params['supportEmail']), trim($email)])                    ->setSubject(Yii::t('app', 'Modifica account').' | '. Yii::t('app', 'Gestionale Teatralmente Gioia'))                    ->send();                    //---End send email            return $this->redirect(['view', 'id' => $model->id]);        }                return $this->render('update', [            /*             * User             */            'model' => $model,                        /*             * List of all auth assignment             */            'auth_assignment' => $auth_assignment,                        /*             * All Auth Item             */            'auth_item' => $auth_item,        ]);    }    /**     * Updates password an existing Utenti model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param string $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdatePassword($id){        $model = $this->findModel($id);        $auth_assignment = new AuthAssignment();        $auth_item = AuthItem::find()->asArray()->all();                if ($this->request->isPost) {            if ($model->load($this->request->post())) {                $original_password = $model->password;                $model->password = md5($model->password);                $model->repeat_password = md5($model->repeat_password);                                if($model->save()) {                    $nome    = $model->nome;                    $cognome = $model->cognome;                    $email   = $model->email;                    $now     = date('d/m/Y H:i:s');                    $link    = Yii::$app->params['backendUrl'];                                        //Send data for email                    Yii::$app->mailer->compose(['html' =>'layouts/html'], ['content' => <<<TESTO<h2>Modifica dei dati di accesso per il socio: <span style='color: darkred;'>{$nome} {$cognome}</span></h2><ul>    <li><strong>Nome utente: </strong>{$email}</li>    <li><strong>Password: </strong>{$original_password}</li>    <li><strong>Data di creazione: </strong>{$now}</li>    <li><strong>Link di accesso: </strong>{$link}</ul><p>Si consiglia di conservare questa email.</p>TESTO])                    ->setFrom([Yii::$app->params['senderEmail'] => "Teatralmente Gioia"])                    ->setTo(trim($email))                    ->setSubject(Yii::t('app', 'Modifica account').' | '. Yii::t('app', 'Gestionale Teatralmente Gioia'))                    ->send();                    //---End send email                }            }        } else {            $model->loadDefaultValues();            $auth_assignment->loadDefaultValues();        }        return $this->redirect(['view', 'id' => $model->id]);    }    /**     * Deletes an existing Utenti model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param string $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDelete($id)    {        $model   = $this->findModel($id);        $nome    = $model->nome;        $cognome = $model->cognome;        $email   = $model->email;        $now     = date('d/m/Y H:i:s');        $model->delete();        //Send data for email        Yii::$app->mailer->compose(['html' =>'layouts/html'], ['content' => <<<TESTO<h2>Cancellazione utente</span></h2><p>L'utente <span style='color: darkred;'>{$nome} {$cognome}</span> � stato cancellato dal gestionaledi <b>Teatralmente Gioia</b></p><ul>    <li><strong>Email: </strong>{$email}</li>    <li><strong>Data di cancellazione: </strong>{$now}</li></ul><p>Se si pensa ci sia stato un errore contattare un amministratore.</p>TESTO])->setFrom([Yii::$app->params['senderEmail'] => "Teatralmente Gioia"])->setTo('mattia.angelillo@gmail.com', /*trim($email)*/)->setSubject(Yii::t('app', 'Cancellazione account').' | '. Yii::t('app', 'Gestionale Teatralmente Gioia'))->send();        return $this->redirect(['index']);    }    /**     * User's profile     *      * @param int $id     * @return backend\Utenti     */    public function actionProfile($id){        $model = $this->findModel($id);        if ($this->request->isPost && $model->load($this->request->post())){            if(empty($model->repeat_password)){                $model->repeat_password = $model->password;            }else{                $model->repeat_password = md5($model->repeat_password);                $model->password = md5($model->password);            }            if($model->save()){                Yii::$app->getSession()->setFlash('success', 'Dati aggiornati con successo');                                return $this->redirect(['/utenti/profile', 'id' => $id]);            }else{                Yii::$app->getSession()->setFlash('error', 'Errore nell\'aggiornare i dati');            }        } else {            $model->loadDefaultValues();        }        return $this->render("profile", [            'model' => $model        ]);    }            //Per l'APP    /**     * Aggiorna i dati del profilo.     *      * Utilizzato per l'APP.     *      * @param type $id     * @return type     */    public function actionUpdateProfileApp($id, $nome, $cognome, $email, $indirizzo, $password = "")    {        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;                $model = $this->findModel($id);                $model->nome = $nome;        $model->cognome = $cognome;        $model->email = $email;        $model->indirizzo = $indirizzo;        if(empty($password)){            $model->repeat_password = $model->password;        }else{            $model->password = $model->repeat_password = md5($password);        }                if($model->save()){            return [$model];        }                return [];    }    /**     * Finds the Utenti model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param string $id ID     * @return Utenti the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModel($id)    {        if (($model = Utenti::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }}