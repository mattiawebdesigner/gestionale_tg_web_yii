<?phpnamespace backend\controllers;use backend\models\Prodotto;use backend\models\ProdottoSearch;use Yii;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\filters\AccessControl;use yii\filters\VerbFilter;/** * ProdottoController implements the CRUD actions for Prodotto model. */class ProdottoController extends Controller{    /*     * @inheritDoc     */    public function behaviors()    {        return array_merge(            parent::behaviors(),            [                'verbs' => [                    'class' => VerbFilter::className(),                    'actions' => [                        'delete' => ['POST'],                    ],                ],                'access' => [                    'class' => AccessControl::className(),                    'rules' => [                        [                            'actions' => ['login', 'error'],                            'allow' => true,                        ],                        [                            'actions' => [],//All page                            'allow' => true,                            'roles' => ['Super User', 'magazziniere'],                        ],                        [                            'actions' => ['index-socio'],//All page                            'allow' => true,                            'roles' => ['Socio'],                        ],                    ],                ],            ]        );    }    /**     * Lists all Prodotto models.     * @param $pulisci true pulisce la ricerca, false nessuna ricerca attiva     * @return mixed     */    public function actionIndex($pulisci = false)    {        $dataProvider = "";        $searchModel = new ProdottoSearch();        $pulisciRicerca = false;                //Leggo il cookie per mantenere la ricerca attiva, anche        //se si cambia la pagina (pagina 1, 2, ecc.)        $cookies = Yii::$app->request->cookies;                //pulisco la ricerca, eliminando il cookie        if($pulisci){            $cookies = Yii::$app->response->cookies;            $cookies->remove('tgcrm-ms');                        unset($_COOKIE['tgcrm-ms']);        }                if(Yii::$app->request->isPost || ($search = $cookies->getValue('tgcrm-ms'))){            $search = $search??htmlspecialchars(Yii::$app->request->post("ricerca"));                        $query = (new \yii\db\Query())                    ->select('*')                    ->from('prodotto')                    ->where('MATCH(nome, descrizione) AGAINST ("'.$search.'" IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION)')                    ->orWhere('proprietario_id IN (SELECT id FROM proprietario WHERE proprietario LIKE "%'.$search.'%")');                        $cookies = Yii::$app->response->cookies;            $cookies->add(new \yii\web\Cookie([                'name'  => 'tgcrm-ms',                'value' => $search,            ]));                        $dataProvider = (new \yii\data\ActiveDataProvider([                    'query' => $query,                     'sort' => ['attributes' => ['nome']]                ])            );            $pulisciRicerca = true;                    }else{            $dataProvider = $searchModel->search($this->request->queryParams);        }                return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,            'pulisciRicerca' => $pulisciRicerca,        ]);    }        /**     * Lists all Prodotto models for partner.     * @return mixed     */    public function actionIndexSocio()    {        $searchModel = new ProdottoSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        return $this->render('index-socio', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Displays a single Prodotto model.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionView($id)    {        return $this->render('view', [            'model' => $this->findModel($id),        ]);    }    /**     * Creates a new Prodotto model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return mixed     */    public function actionCreate()    {        $model = new Prodotto();        if ($this->request->isPost) {            if ($model->load($this->request->post()) && $model->save()) {                return $this->redirect(['view', 'id' => $model->id]);            }        } else {            $model->loadDefaultValues();        }        return $this->render('create', [            'model' => $model,        ]);    }        /**     * Updates an existing Prodotto model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdate($id)    {        $model = $this->findModel($id);        if ($this->request->isPost && $model->load($this->request->post()) && $model->save()) {            return $this->redirect(['view', 'id' => $model->id]);        }        return $this->render('update', [            'model' => $model,        ]);    }    /**     * Deletes an existing Prodotto model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $id ID     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDelete($id)    {        $this->findModel($id)->delete();        return $this->redirect(['index']);    }    /**     * Finds the Prodotto model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Prodotto the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModel($id)    {        if (($model = Prodotto::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }}