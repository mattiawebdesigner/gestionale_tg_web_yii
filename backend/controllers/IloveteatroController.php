<?phpnamespace backend\controllers;use Yii;use backend\models\Allegati;use backend\models\IltArticoli;use backend\models\MediaSearch;use backend\models\MediaUploadForm;use backend\models\PdfUploadForm;use backend\models\PdfMultipleUploadForm;use backend\models\Media;use backend\models\IltImpostazioni;use backend\models\IltAlbum;use backend\models\IltAlbumFoto;use backend\models\IltFoto;use backend\models\IltFestival;use backend\models\IltIscrizioni;use backend\models\IltIscrizioniSearch;use backend\models\IltIscrizioniAllegati;use backend\models\IltAllegati;use backend\components\sistema_prenotazione_biglietti\Postazioni;use app\models\IltCommenti;use app\models\IltPrenotazioni;use app\models\IltSpettacolo;use yii\web\UploadedFile;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\filters\AccessControl;use yii\filters\VerbFilter;/** * AllegatiController implements the CRUD actions for Allegati model. */class IloveteatroController extends Controller{    /**     * @inheritDoc     */    public function behaviors()    {        return array_merge(            parent::behaviors(),            [                'verbs' => [                    'class' => VerbFilter::className(),                    'actions' => [                        'delete' => ['POST'],                    ],                ],                'access' => [                    'class' => AccessControl::className(),                    'rules' => [                        [                            'actions' => ['login', 'error'],                            'allow' => true,                        ],                        [                            'actions' => [],//All page                            'allow' => true,                            'roles' => ['Super User', 'segretaria', 'I Love Teatro'],                        ],                    ],                ],            ]        );    }    /**     *      * @param type $action     * @return boolean     */    public function beforeAction($action) {        if(parent::beforeAction($action)){            $this->layout = "iloveteatro";            return true;        }        return false;    }    /**     * Return index page for I Love Teatro administrator     *      * @return mixed     */    public function actionIndex(){        return $this->render('index');    }    /**     * Home page for "Articoli"     *      * @return mixed     */    public function actionArticoli() {        return $this->render('articoli/index');    }    /**     * Show all articoli     *     * @return mixed     */    public function actionTuttiArticoli() {        $searchModel = new \backend\models\IltArticoliSearch();        $dataProvider = $searchModel->search($this->request->queryParams);                return $this->render('articoli/all', [            'searchModel'  => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Create new articoli     *      * @return mixed     */    public function actionNuovoArticolo() {        $model      = new IltArticoli();        $uploadForm = new \backend\models\MediaIloveTeatroUploadForm();        if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post())){                $uploadForm->mediaFile = \yii\web\UploadedFile::getInstance($uploadForm, 'mediaFile');                                if($uploadForm->mediaFile <> "" || isset($uploadForm->mediaFile) || !empty($uploadForm->mediaFile)){                    if($return = $uploadForm->upload() ){                        $model->immagine_in_evidenza = $return['fileName'].".".$return['extension'];                    }                }            }            if($model->save()){                Yii::$app->session->setFlash("success", Yii::t('app', 'Articolo salvato con successo'));                return $this->redirect(['/iloveteatro/tutti-articoli']);            }        }        return $this->render('articoli/create', [            'model'      => $model,            'uploadForm' => $uploadForm,            'type'       => 'create',        ]);    }    /**     * Update an article     *      * @param integer $id     * @return mixed     */    public function actionArticoliUpdate($id){        $model      = $this->findModelArticoli($id);        $uploadForm = new \backend\models\MediaIloveTeatroUploadForm();        if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post())){                $uploadForm->mediaFile = \yii\web\UploadedFile::getInstance($uploadForm, 'mediaFile');                                if($uploadForm->mediaFile <> ""){                    if($return = $uploadForm->upload() ){                        $model->immagine_in_evidenza =  Yii::$app->params['site_protocol'].                                                        Yii::$app->params['backendWeb'].                                                        'iloveteatro'.DIRECTORY_SEPARATOR.                                                        'media_uploads'.DIRECTORY_SEPARATOR.                                                        $return['fileName'].".".$return['extension'];                    }                }                if($model->save()){                    Yii::$app->session->setFlash("success", Yii::t('app', 'Articolo modificato con successo'));                    return $this->redirect(['/iloveteatro/tutti-articoli']);                }            }            return;        }                return $this->render('articoli/create', [            'model'      => $model,            'uploadForm' => $uploadForm,            'type'       => 'update',        ]);    }    /**     * Delete Articolo     *      * @param int $id     * @return mixed     */    public function actionArticoliDelete($id) {        $this->findModelArticoli($id)->delete();        return $this->redirect(['/iloveteatro/tutti-articoli']);    }        /**     * Create new category     *      * @return mixed     */    public function actionCategorieArticoli() {        $searchModel = new \backend\models\IltCategorieSearch();        $dataProvider = $searchModel->search($this->request->queryParams);        return $this->render('categorie/index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Create new category     *      * @return mixed     */    public function actionCategoriaCreate(){        $model = new \backend\models\IltCategorie();        if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) && $model->save()){                return $this->redirect(['/iloveteatro/categorie-articoli']);            }        }        return $this->render('categorie/create', [            'model' => $model,            'type'  => 'create'        ]);    }    /**     * Create new category     *      * @return mixed     */    public function actionCategorieUpdate($id){        $model = $this->findModelCategoria($id);        if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) && $model->save()){                return $this->redirect(['/iloveteatro/categorie-articoli']);            }        }        return $this->render('categorie/create', [            'model' => $model,            'type'  => 'update',        ]);    }        /**     * Create new category     *      * @return mixed     */    public function actionCategorieDelete($id){        $this->findModelCategoria($id)->delete();        return $this->redirect(['/iloveteatro/categorie-articoli']);    }    ########## Iscrizioni ##########    /**     *      * @return type     */    public function actionIscritti(){        $searchModel = new IltIscrizioniSearch();        $dataProvider   = $searchModel->searchActive($this->request->queryParams);        $festival = IltFestival::find()->orderBy(['anno' => SORT_DESC])->one();        return $this->render('/iloveteatro/iscrizioni/iscritti', [            'dataProvider' => $dataProvider,            'searchModel'  => $searchModel,            'festival'     => $festival,        ]);    }    /**     *      * @return type     */    public function actionAddTroupe(){        $model      = new IltIscrizioni();        $festival   = IltFestival::findOne(['anno' => date('Y')]);        $pdf        = new PdfMultipleUploadForm();        if( Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) && $pdf->load(Yii::$app->request->post())){                $pdf->multipleFile = UploadedFile::getInstances($pdf, 'multipleFile');                if($model->save()){                    foreach($pdf->multipleFile as $val){                        $basePath = Yii::$app->basePath.'/web/iloveteatro/pdf_uploads/';                        $fileName = time().'-'. md5($val->baseName).".".$val->extension;                        $val->saveAs($basePath.$fileName);//Save pdf                        $allegato = new \backend\models\IltAllegati();                        $allegato->allegato = $fileName;                        $allegato->nome = $val->baseName;                        $allegato->save();                        $allegato_iscrizione = new \backend\models\IltIscrizioniAllegati();                        $allegato_iscrizione->allegato = $allegato->id;                        $allegato_iscrizione->iscrizione = $model->id;                        $allegato_iscrizione->save();                    }                    return $this->redirect(['/iloveteatro/iscrizioni-view',                        'id' => $model->id,                    ]);                }            }        }        return $this->render('/iloveteatro/iscrizioni/add', [            'model'     => $model,            'festival'  => $festival,            'pdf'       => $pdf,        ]);    }    /**     * Update a troupe     *      * @return type     */    public function actionUpdateTroupe($id){        $model      = $this->findModelIscrizioni($id);        $festival   = IltFestival::findOne(['anno' => date('Y')]);        $pdf        = new PdfMultipleUploadForm();        $allegati = IltAllegati::find()->joinWith('iltIscrizioniAllegatis')                                       ->where(['iscrizione' => $model->id])                                       ->all();        if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post()) && $pdf->load(Yii::$app->request->post())){                if($model->save()){                    $pdf->multipleFile = UploadedFile::getInstances($pdf, 'multipleFile');                    if(sizeof($pdf->multipleFile) <> 0){                        //Delete old attachment                        $iscrizione_allegato = IltIscrizioniAllegati::find()->where(['iscrizione' => $id])->all();                        foreach ($iscrizione_allegato as $all){                            $allegati = IltAllegati::findOne($all->allegato);                            $allegati->delete();                        }                                                //Insert new attachment                        foreach($pdf->multipleFile as $val){                            $basePath = '../web/iloveteatro/pdf_uploads/';                            $fileName = time().'-'. md5($val->baseName).".".$val->extension;                            $val->saveAs($basePath.$fileName);//Save pdf                            $allegato = new \backend\models\IltAllegati();                            $allegato->allegato = Yii::$app->params['site_protocol'].Yii::$app->params['backend'].'web/iloveteatro/pdf_uploads/'.$fileName;                            $allegato->nome = $val->baseName;                            $allegato->save();                            $allegato_iscrizione = new \backend\models\IltIscrizioniAllegati();                            $allegato_iscrizione->allegato = $allegato->id;                            $allegato_iscrizione->iscrizione = $model->id;                            $allegato_iscrizione->save();                        }                        return $this->redirect(['/iloveteatro/iscrizioni-view',                            'id' => $model->id,                        ]);                    }                                        Yii::$app->session->setFlash('success', Yii::t('app', 'Dati agggiornati con successo'));                    return $this->redirect(['/iloveteatro/update-troupe',                        'id' => $model->id,                    ]);                }            }        }        return $this->render('/iloveteatro/iscrizioni/update', [            'model'     => $model,            'festival'  => $festival,            'pdf'       => $pdf,            'allegati'  => $allegati,        ]);    }    /**     * Redirect to <strong>update-troupe</strong> to update a company     *     * @param type $id     * @return type     */    public function actionIscrizioniUpdate($id){        return $this->redirect(['update-troupe', 'id' => $id]);    }    /**     * Show a company     *      * @param type $id     * @return type     */    public function actionIscrizioniView($id){        $model = $this->findModelIscrizioni($id);        $allegati = IltAllegati::find()->joinWith('iltIscrizioniAllegatis')                                       ->where(['iscrizione' => $model->id])                                       ->all();        return $this->render('/iloveteatro/iscrizioni/view', [            'model' => $model,            'allegati' => $allegati,        ]);    }    /**     * Delete an company     *      * @param type $id     */    public function actionIscrizioniDelete($id){        $model = IltIscrizioni::findOne($id);        $model->attivo = IltIscrizioni::DELETED;        $model->save();                Yii::$app->session->setFlash('success', Yii::t('app', 'Iscrizione rifiutata'));        return $this->redirect(['/iloveteatro/iscrizioni-view', 'id' => $model->id]);            }    /**     * Approve a company     *      * @param type $id     * @return type     */    public function actionApprovedTroupe($id){        $model = IltIscrizioni::findOne($id);        $model->attivo = IltIscrizioni::SUBSCRIBED;        $model->save();                Yii::$app->session->setFlash('success', Yii::t('app', 'Iscrizione approvata'));                return $this->redirect(['/iloveteatro/iscrizioni-view', 'id' => $model->id]);    }    //##################################################    /**     * Media files     *      * @return mixed     */    public function actionMedia(){        $searchModel    = new MediaSearch();        $dataProvider   = $searchModel->search($this->request->queryParams);        $upload         = new MediaUploadForm();        return $this->render('/media/index', [            'searchModel'   => $searchModel,            'dataProvider'  => $dataProvider,            'upload'        => $upload,            'url'           => '/iloveteatro/media-upload',        ]);    }        /**     * Delete media     *      * @param int $id     * @return mixed     */    public function actionDelete($id){        unlink($this->findModelMedia($id)->link);        $this->findModelMedia($id)->delete();                return $this->redirect(['media']);    }        /**     * Upload media     *      * @return \yii\web\Response     */    public function actionMediaUpload()    {        $model = new MediaUploadForm();        $mediaFile=null;        if (Yii::$app->request->isPost) {            $model->mediaFile = UploadedFile::getInstance($model, 'mediaFile');            if ($mediaFile = $model->upload()) {            }        }                $media = new Media();        $media->link = $mediaFile['uploadDirectory'].$mediaFile['fileName'].".".$mediaFile['extension'];        $media->nome = $mediaFile['fileName'];        $media->mime = $mediaFile['type'];        $media->save();                $upload = new MediaUploadForm();        $media = Media::find()->all();        return $this->redirect(['media',            'media'     => $media,            'upload'    => $upload,        ]);    }    /*** COMMENTS***/    /**     * Manage comments     * @return mixed     */    public function actionCommenti() {        $commentArticlesApproved = IltCommenti::find()->joinWith('articolos')                                                  ->where(['approvato' => IltCommenti::APPROVED])                                                  ->andWhere('ilt_articoli_commenti.articolo = ilt_articoli.id')                                                  ->all();        $commentArticlesToBeApproved = IltCommenti::find()->joinWith('articolos')                                                  ->where(['approvato' => IltCommenti::TO_BE_APPROVED])                                                  ->andWhere('ilt_articoli_commenti.articolo = ilt_articoli.id')                                                  ->all();        $commentArticlesReject = IltCommenti::find()->joinWith('articolos')                                                  ->where(['approvato' => IltCommenti::REJECT])                                                  ->andWhere('ilt_articoli_commenti.articolo = ilt_articoli.id')                                                  ->all();        $commentAlbumsApproved = IltCommenti::find()->joinWith('albums')                                                  ->where(['approvato' => IltCommenti::APPROVED])                                                  ->andWhere('ilt_album_commenti.album = ilt_album.id')                                                  ->all();        $commentAlbumsToBeApproved = IltCommenti::find()->joinWith('albums')                                                  ->where(['approvato' => IltCommenti::TO_BE_APPROVED])                                                  ->andWhere('ilt_album_commenti.album = ilt_album.id')                                                  ->all();        $commentAlbumsReject = IltCommenti::find()->joinWith('albums')                                                  ->where(['approvato' => IltCommenti::REJECT])                                                  ->andWhere('ilt_album_commenti.album = ilt_album.id')                                                  ->all();        $commentFotoApproved = IltCommenti::find()->joinWith('fotos')                                                  ->where(['approvato' => IltCommenti::APPROVED])                                                  ->andWhere('ilt_commenti_foto.foto = ilt_foto.id')                                                  ->all();        $commentFotoToBeApproved = IltCommenti::find()->joinWith('fotos')                                                  ->where(['approvato' => IltCommenti::TO_BE_APPROVED])                                                  ->andWhere('ilt_commenti_foto.foto = ilt_foto.id')                                                  ->all();        $commentFotoReject = IltCommenti::find()->joinWith('fotos')                                                  ->where(['approvato' => IltCommenti::REJECT])                                                  ->andWhere('ilt_commenti_foto.foto = ilt_foto.id')                                                  ->all();                return $this->render('comments/index', [            'commentArticlesApproved'       => $commentArticlesApproved,            'commentArticlesToBeApproved'   => $commentArticlesToBeApproved,            'commentArticlesReject'         => $commentArticlesReject,            'commentAlbumsApproved'     => $commentAlbumsApproved,            'commentAlbumsToBeApproved' => $commentAlbumsToBeApproved,            'commentAlbumsReject'       => $commentAlbumsReject,            'commentFotoApproved'     => $commentFotoApproved,            'commentFotoToBeApproved' => $commentFotoToBeApproved,            'commentFotoReject'       => $commentFotoReject,        ]);    }        /**     * Approve a comment     *      * @param int $id     * @return mixed     */    public function actionCommentApprove($id) {        $comment = IltCommenti::findOne($id);        $comment->approvato = IltCommenti::APPROVED;        $comment->save();        Yii::$app->session->setFlash('success', Yii::t('app', 'Commento approvato con successo'));        return $this->redirect(['commenti']);    }    /**     * Approve a comment     *      * @param int $id     * @return mixed     */    public function actionCommentReject($id) {        $comment = IltCommenti::findOne($id);        $comment->approvato = IltCommenti::REJECT;        $comment->save();                Yii::$app->session->setFlash('success', Yii::t('app', 'Commento rifiutato'));        return $this->redirect(['commenti']);    }    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////        /**     * Manage settings     * @return mixed     */    public function actionSettings(){        $impostazioni = IltImpostazioni::find()->all();                //Eliminazione di un impostazione        if($this->request->isGet && ($get=$this->request->get())){            if(isset($get['action']) && $get['action']==="delete"){                echo "OKOK";                                //Trovo l'impostazione di riferimento (in base al suo ID)                $impostazione = IltImpostazioni::findOne($get['id']);                                echo $impostazione->valore;                $valore = json_decode($impostazione->valore);                                unset($valore[$get['row']]);                $impostazione->valore = json_encode(array_values($valore));                                if($impostazione->save()){                    Yii::$app->session->setFlash("success", Yii::t('app', 'Impostazioni salvate con successo!'));                    return $this->redirect(['iloveteatro/settings']);                }else{                    Yii::$app->session->setFlash("success", Yii::t('app', 'Si è verificato un problema nel salvataggio delle impostazioni!'));                    return $this->redirect(['iloveteatro/settings']);                }            }        }                //Salvataggio/Aggiornamento impostazioni        if($this->request->isPost && ($post=$this->request->post('impostazione'))){            $save = false;            foreach ($impostazioni as $k_i => $v_i){                $save = false;                foreach ($post as $k_i => $p_i){                    if($v_i->impostazione === $k_i){                        //Rimuovo gli elementi vuoti                        foreach ($p_i as $k => $p_i_d){                            if($p_i_d['nome'] === ""){                                unset($p_i[$k]);                            }                        }                                                echo $v_i->valore = json_encode($p_i);                    }                }                                $new_impostazioni = new IltImpostazioni();                $new_impostazioni->id = $v_i->id;                $new_impostazioni->impostazione = $v_i->impostazione;                $new_impostazioni->valore = $v_i->valore;                $new_impostazioni->struttura = $v_i->struttura;                                if($v_i->delete() && $new_impostazioni->save()){                    $save = true;                }            }                        if($save){                Yii::$app->session->setFlash("success", Yii::t('app', 'Impostazioni salvate con successo!'));                return $this->redirect(['iloveteatro/settings']);            }else{                Yii::$app->session->setFlash("success", Yii::t('app', 'Si è verificato un problema nel salvataggio delle impostazioni!'));                return $this->redirect(['iloveteatro/settings']);            }        }                return $this->render('settings/index', [            'impostazioni' => $impostazioni,        ]);    }    /**     * Manage settings     * @return mixed     */    public function actionSlideshow(){        return $this->render('slideshow/index');    }    /**     * Manage a slideshow     *      * @return mixed     */    public function actionAlbumUpdate($id = 1){        $album = $this->findModelAlbum( $id );        $galleryFoto = IltAlbumFoto::find()->where(['album' => $id])->all();        //Foto presenti per la gallery        $foto = [];        foreach ($galleryFoto as $val){            $f = IltFoto::find()->where(['id' => $val->foto])->one();            if( !empty($f) ) $foto[] = $f;        }        //-------------------------------        //Controllo se è stato inviato un form per l'upload delle foto della galleria        //In questo caso aggiorno oppure salvo le foto e aggiorno la gallery, se necessario        if ($this->request->isPost) {            $foto_post = [];            $tot = $this->request->post("IltFoto", "[]")==null ? count($this->request->post("IltFoto", "[]")['id']) : 0;                        //Creo nuovi slide in base agli upload            $fotoUpload = new IltFoto();            $upload = UploadedFile::getInstances($fotoUpload, 'url');            if(isset($upload) && count($upload) > 0){                foreach($upload as $k => $u){                    $basePath = Yii::$app->basePath.'/web/iloveteatro/media_uploads/';                    $fileName = time().'-'. md5($u->baseName).".".$u->extension;                    $u->saveAs($basePath.$fileName);//Save images                    $fotoUpload->url = "iloveteatro/media_uploads/" . $fileName;                    $fotoUpload->posizione = 1;                    $fotoUpload->save();                                        $galleryFoto = new IltAlbumFoto();                    $galleryFoto->foto  = $fotoUpload->id;                    $galleryFoto->album = $id;                    $galleryFoto->save();                    $fotoUpload = new IltFoto();                }                Yii::$app->session->setFlash("success", Yii::t('app', 'Foto aggiunte alla galleria'));                return $this->redirect(['album-update',                    'id' => $id,                ]);            }            //-------------------------------------------------------------            //Upload slide            if($this->request->isPost && $this->request->post("IltFoto", "[]")['id']){                $tot = count($this->request->post("IltFoto", "[]")['id']);                for($i=0; $i<$tot; $i ++){                    //Load models                    $fotoModels[$i] = new IltFoto();                    foreach ($this->request->post("IltFoto") as $key => $f){                        $fotoModels[$i]->$key = $this->request->post("IltFoto", "[]")[$key][$i];                        if($key == "id"){                            $fotoModels[$i]->url = IltFoto::findOne(['id' => $this->request->post("IltFoto", "[]")[$key][$i]])->url;                                                        //Cancello i valori per reinserirli dopo                            if($this->findModelFoto($this->request->post("IltFoto", "[]")[$key][$i]) <> null){                                $this->findModelFoto($this->request->post("IltFoto", "[]")[$key][$i])->delete();                            }                        }                    }                    //----------------                                        //Salvo i record modificati                    $fotoModels[$i]->save();                    $galleryFoto = new IltAlbumFoto();                    $galleryFoto->foto  = $fotoModels[$i]->id;                    $galleryFoto->album = $id;                    $galleryFoto->save();                    //------------------------------------------------                }            }            //-------------------------------------------------------------                        //Aggiorno la gallery            if($album->load($this->request->post())){                $album->save();            }            //--------------------------            Yii::$app->session->setFlash('success', Yii::t('app', 'Salvato con successo'));            return $this->redirect(['album-update',                'id' => $id,            ]);        } else {            $album->loadDefaultValues();        }                return $this->render('slideshow/home', [                        'album'         => $album,            'foto'          => $foto,            /*             * Usato per le foto da inserire             */            'fotoNew'       => new IltFoto(),        ]);    }    /**     * Show Albums     * @return mixed     */    public function actionSlideshowAlbum(){        $album = IltAlbum::find()->joinWith('fotos')                                 ->where('ilt_album.id <> 1')                                 ->all();        return $this->render('slideshow/album', [            'album' => $album,        ]);    }    /**     * Deletes an existing Gallery model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param int $id ID     * @return \yii\web\Response     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDeleteSlide($id, $album_id = 1)    {        $model = $this->findModelFoto($id);        unlink($model->url);        $model->delete();        Yii::$app->session->setFlash('success', Yii::t('app', 'Foto eliminata con successo'));        return $this->redirect(['album-update', 'id' => $album_id]);    }    /**     * Create new album     *      * @return mixed     */    public function actionCreateAlbum(){        $album = new IltAlbum();        $album->nome = Yii::t('app', 'Nuovo album');        $album->descrizione = " ";        $album->ultima_modifica = $album->data_creazione = date('Y-m-d H:i:s');                if($album->save()){            Yii::$app->session->setFlash ('success', Yii::t('app', 'Album creato con successo'));            return $this->redirect(['album-update',                'id' => $album->id,            ]);        }else{            Yii::$app->session->setFlash ('error', Yii::t('app', 'Si &egrave; verificato un errore nel creare l\'album'));            return $this->redirect(['slideshow-album']);        }    }    /**     * Delete an album     *      * @return mixed     */    public function actionAlbumDelete($id){        $model = $this->findModelAlbum($id);        $model->delete();                Yii::$app->session->setFlash ('success', Yii::t('app', 'Album cancellato con successo'));        return $this->redirect(['iloveteatro/slideshow-album']);    }    /**     * Create festival     *      * @return type     */    public function actionFestival(){        $newFestival = new IltFestival();        $pdfUpload   = new PdfUploadForm();        $pdfMultipleUpload   = new PdfMultipleUploadForm();        if(Yii::$app->request->isPost){            if($newFestival->load(Yii::$app->request->post())){                $newFestival->descrizione = Yii::$app->request->post("IltFestival")['descrizione'];                $pdfUpload->file = UploadedFile::getInstance($pdfUpload, 'file');                $pdfMultipleUpload->multipleFile = UploadedFile::getInstances($pdfMultipleUpload, 'multipleFile');                                if($pdfUpload->file == "" || $pdfMultipleUpload->multipleFile == ""){                    Yii::$app->session->setFlash('error', Yii::t('app', 'Caricare i file richiesti'));                    return $this->render('festival/index', [                        'newFestival' => $newFestival,                        'pdf'         => $pdfUpload,                        'pdfMultiple' => $pdfMultipleUpload,                    ]);                }                                if($result = $pdfUpload->upload()){                    $newFestival->regolamenti = $result['fileName'];                }                                if($newFestival->save()){                    if($result = $pdfMultipleUpload->upload()){                        if($result){                            foreach ($result as $val){                                $allegato = new \backend\models\IltAllegati();                                $allegato->allegato = $val['fileName'];                                $allegato->nome     = $val['originalName'];                                $allegato->save();                                $festival_allegati = new \backend\models\IltFestivalAllegati();                                $festival_allegati->allegato = $allegato->id;                                $festival_allegati->festival = $newFestival->id;                                $festival_allegati->save();                            }                        }                       return $this->redirect(['iloveteatro/festival-table', 'id' => $newFestival->id]);                    }                }                                return;            }        }                return $this->render('festival/index', [            'newFestival' => $newFestival,            'pdf'         => $pdfUpload,            'pdfMultiple' => $pdfMultipleUpload,            'type'        => 'create',        ]);    }        /**     * Show all festival     *      * @return mixed     */    public function actionFestivalTable(){        $searchModel = new \backend\models\IltFestivalSearch();        $dataProvider = $searchModel->search($this->request->queryParams);                return $this->render('festival/table', [            'searchModel'  => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * View and upload festival     *     * @return mixed     */    public function actionFestivalView($id){        $newFestival = $this->findModelFestival($id);        $pdfUpload   = new PdfUploadForm();        $pdfMultipleUpload   = new PdfMultipleUploadForm();        $allegati = \backend\models\IltAllegati::find()                                                ->joinWith("iltFestivalAllegatis")                                                ->where(['festival' => $id])                                                ->all();        if(Yii::$app->request->isPost){            if($newFestival->load(Yii::$app->request->post())){                $pdfUpload->file = UploadedFile::getInstance($pdfUpload, 'file');                $pdfMultipleUpload->multipleFile = UploadedFile::getInstances($pdfMultipleUpload, 'multipleFile');                $newFestival->descrizione = Yii::$app->request->post('IltFestival')['descrizione'];                if($pdfUpload->file <> ""){                    if($result = $pdfUpload->upload()){                        $newFestival->regolamenti = $result['fileName'];                    }                }                                if($newFestival->save()){                    if($pdfMultipleUpload->multipleFile <> []){                        $festival_allegati = \backend\models\IltAllegati::find()->joinWith("iltFestivalAllegatis")->all();                        foreach($festival_allegati as $allegato){                            $allegato->delete();                        }                                                if($result = $pdfMultipleUpload->upload()){                            if($result){                                foreach ($result as $val){                                    $allegato = new \backend\models\IltAllegati();                                    $allegato->allegato = $val['fileName'];                                    $allegato->nome     = $val['originalName'];                                    $allegato->save();                                                                        $festival_allegati = new \backend\models\IltFestivalAllegati();                                    $festival_allegati->allegato = $allegato->id;                                    $festival_allegati->festival = $newFestival->id;                                    $festival_allegati->save();                                }                            }                        }                    }                    Yii::$app->session->setFlash('success',Yii::t('app', 'Aggiornamenti salvati'));                                        return $this->redirect(['iloveteatro/festival-table']);                }            }                        return;        }        return $this->render("festival/index", [            'newFestival' => $newFestival,            'pdf'         => $pdfUpload,            'pdfMultiple' => $pdfMultipleUpload,            'type'        => "update",            'allegati'    => $allegati,        ]);    }        /**     * Delete a festival     */    public function actionFestivalDelete($id){        \backend\models\IltFestival::findOne(['id' => $id])->delete();                return $this->redirect(['iloveteatro/festival-table']);    }        /**     * Show festival ticket     *      * @return mixed     */    public function actionTicket(){        $spettacoli = \app\models\IltSpettacolo::find()                        ->where(['festival' => IltFestival::find()->orderBy(['anno' => SORT_DESC])->one()->id])                        ->orderBy(['data' => SORT_ASC])                        ->all();        return $this->render("ticket/index", [            'spettacoli' => $spettacoli,        ]);    }    /**     * Delete a ticket     *      * @param int $id     */    public function actionTicketDelete($id, $spettacolo_id, $email){        $this->findModelPrenotazione($id)->delete();        Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione cancellata con successo'));        return $this->redirect(['/iloveteatro/show-ticket', 'spettacolo_id' => $spettacolo_id, 'email' => $email]);    }    /**     * Paiy ticket     *      * @param int $id     * @param int $spettacolo_id     */    public function actionPaidedTicket($id=0, $spettacolo_id, $email){        if($id===0){            $model = IltPrenotazioni::find()                    ->where(['spettacolo' => $spettacolo_id])                    ->andWhere(['email' => $email])                    ->all();            foreach ($model as $val){                $val->pagato = IltPrenotazioni::PAGATO;                $val->save();            }        }else{            $model = $this->findModelPrenotazione($id);            $model->pagato = IltPrenotazioni::PAGATO;            $model->save();        }        Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione segnata come pagata'));        return $this->redirect(['/iloveteatro/show-ticket', 'spettacolo_id' => $spettacolo_id, 'email' => $email]);    }    /**     * Not pay ticket     *      * @param int $id     * @param int $spettacolo_id     */    public function actionPaidedNoTicket($id=0, $spettacolo_id, $email){        if($id===0){            $model = IltPrenotazioni::find()                    ->where(['spettacolo' => $spettacolo_id])                    ->andWhere(['email' => $email])                    ->all();                        foreach ($model as $val){                $val->pagato = IltPrenotazioni::NON_PAGATO;                $val->save();            }        }else{$model = $this->findModelPrenotazione($id);            $model->pagato = IltPrenotazioni::NON_PAGATO;            $model->save();        }                Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione segnata come non pagata'));                return $this->redirect(['/iloveteatro/show-ticket', 'spettacolo_id' => $spettacolo_id, 'email' => $email]);    }    /**     *      * @param int $spettacolo_id     * @return mixed    */    public function actionPrenotazioni($spettacolo_id, $search = ""){        $prenotazioni = IltPrenotazioni::find()                            ->where(['spettacolo' => $spettacolo_id])                            ->orderBy(['cognome' => SORT_ASC, 'nome' => SORT_ASC, 'data_registrazione' => SORT_ASC])                            ->groupBy(['email'])                            ->all();        $spettacolo = IltSpettacolo::findOne($spettacolo_id);                //Conto il numero totale di posti prenotati        $totali         = IltPrenotazioni::totali($prenotazioni, $spettacolo->piantina);        $nOfSeatBooked  = $totali['nOfSeatBooked'];        $nOfSeatState   = $totali['nOfSeatState'];        //------------------------------------------------------------                if(Yii::$app->request->isPost){            $search = Yii::$app->request->post("cerca");            if($search <> ""){                $prenotazioni = IltPrenotazioni::find()                                ->where(['like', 'nome', "%".$search."%", false])                                ->orWhere(['like', 'cognome', "%".$search."%", false])                                ->orWhere(['like', 'email', "%".$search."%", false])                                ->groupBy(['email'])                                ->andWhere(['spettacolo' => $spettacolo_id])                                ->all();                                return $this->render('ticket/prenotazioni', [                    'prenotazioni'  => $prenotazioni,                    'spettacolo'    => $spettacolo,                    'search'        => $search,                    'spettacolo_id' => $spettacolo_id,                ]);            }        }        return $this->render('ticket/prenotazioni', [            'prenotazioni'  => $prenotazioni,            'spettacolo'    => $spettacolo,            'search'        => $search,            'spettacolo_id' => $spettacolo_id,                        'nOfSeatBooked' => $nOfSeatBooked,            'nOfSeatState'  => $nOfSeatState,        ]);    }        /**     * Inserisce una nuova prenotazione.     *      * @param int $spettacolo_id     * @return type     */    public function actionPrenotazioneTicket($spettacolo_id){        $model = $this->findModelSpettacolo($spettacolo_id);        $postazioni = new Postazioni(json_decode($model->piantina));        //{"platea":{"file":{"A":{"posti":{"1":{"x":580,"y":662},"2":{"x":565,"y":662},"3":{"x":550,"y":662},"4":{"x":535,"y":662},"5":{"x":520,"y":662},"6":{"x":505,"y":662},"7":{"x":490,"y":662},"8":{"x":475,"y":662},"9":{"x":460,"y":662},"10":{"x":445,"y":662},"11":{"x":430,"y":662},"12":{"x":415,"y":662}}},"B":{"posti":{"1":{"x":580,"y":637},"2":{"x":565,"y":637},"3":{"x":550,"y":637},"4":{"x":535,"y":637},"5":{"x":520,"y":637},"6":{"x":505,"y":637},"7":{"x":490,"y":637},"8":{"x":475,"y":637},"9":{"x":460,"y":637},"10":{"x":445,"y":637},"11":{"x":430,"y":637},"12":{"x":415,"y":637}}},"C":{"posti":{"0":{"x":595,"y":612},"1":{"x":580,"y":612},"2":{"x":565,"y":612},"3":{"x":550,"y":612},"4":{"x":535,"y":612},"5":{"x":520,"y":612},"6":{"x":505,"y":612},"7":{"x":490,"y":612},"8":{"x":475,"y":612},"9":{"x":460,"y":612},"10":{"x":445,"y":612},"11":{"x":430,"y":612},"12":{"x":415,"y":612},"14":{"x":400,"y":612}}},"D":{"posti":{"1":{"x":580,"y":587},"2":{"x":565,"y":587},"3":{"x":550,"y":587},"4":{"x":535,"y":587},"5":{"x":520,"y":587},"6":{"x":505,"y":587},"7":{"x":490,"y":587},"8":{"x":475,"y":587},"9":{"x":460,"y":587},"10":{"x":445,"y":587},"11":{"x":430,"y":587},"12":{"x":415,"y":587},"14":{"x":400,"y":587}}},"E":{"posti":{"1":{"x":580,"y":562},"2":{"x":565,"y":562},"3":{"x":550,"y":562},"4":{"x":535,"y":562},"5":{"x":520,"y":562},"6":{"x":505,"y":562},"7":{"x":490,"y":562},"8":{"x":475,"y":562},"9":{"x":460,"y":562},"10":{"x":445,"y":562},"11":{"x":430,"y":562},"12":{"x":415,"y":562},"14":{"x":400,"y":562}}},"F":{"posti":{"1":{"x":580,"y":537},"2":{"x":565,"y":537},"3":{"x":550,"y":537},"4":{"x":535,"y":537},"5":{"x":520,"y":537},"6":{"x":505,"y":537},"7":{"x":490,"y":537},"8":{"x":475,"y":537},"9":{"x":460,"y":537},"10":{"x":445,"y":537},"11":{"x":430,"y":537},"12":{"x":415,"y":537},"14":{"x":400,"y":537}}},"G":{"posti":{"1":{"x":580,"y":512},"2":{"x":565,"y":512},"3":{"x":550,"y":512},"4":{"x":535,"y":512},"5":{"x":520,"y":512},"6":{"x":505,"y":512},"7":{"x":490,"y":512},"8":{"x":475,"y":512},"9":{"x":460,"y":512},"10":{"x":445,"y":512},"11":{"x":430,"y":512},"12":{"x":415,"y":512},"14":{"x":400,"y":512}}},"H":{"posti":{"1":{"x":580,"y":487},"2":{"x":565,"y":487},"3":{"x":550,"y":487},"4":{"x":535,"y":487},"5":{"x":520,"y":487},"6":{"x":505,"y":487},"7":{"x":490,"y":487},"8":{"x":475,"y":487},"9":{"x":460,"y":487},"10":{"x":445,"y":487},"11":{"x":430,"y":487},"12":{"x":415,"y":487},"14":{"x":400,"y":487}}},"L":{"posti":{"1":{"x":572,"y":462},"2":{"x":557,"y":462},"3":{"x":542,"y":462},"4":{"x":527,"y":462},"5":{"x":512,"y":462},"6":{"x":497,"y":462},"7":{"x":482,"y":462},"8":{"x":467,"y":462},"9":{"x":452,"y":462},"10":{"x":437,"y":462},"11":{"x":422,"y":462},"12":{"x":407,"y":462}}},"M":{"posti":{"1":{"x":565,"y":437},"2":{"x":550,"y":437},"3":{"x":535,"y":437},"4":{"x":520,"y":437},"5":{"x":505,"y":437},"6":{"x":490,"y":437},"7":{"x":475,"y":437},"8":{"x":460,"y":437},"9":{"x":445,"y":437},"10":{"x":430,"y":437},"11":{"x":415,"y":437}}},"N":{"posti":{"1":{"x":535,"y":412},"2":{"x":520,"y":412},"3":{"x":505,"y":412},"4":{"x":490,"y":412},"5":{"x":475,"y":412},"6":{"x":460,"y":412},"7":{"x":445,"y":412}}},"O":{"posti":{"1":{"x":513,"y":387,"tipo_seduta":"sedia"},"2":{"x":498,"y":387,"tipo_seduta":"sedia"},"3":{"x":483,"y":387,"tipo_seduta":"sedia"},"4":{"x":468,"y":387,"tipo_seduta":"sedia"}}}}},"I Ordine":{"palco":{"1":{"fila":{"1":{"posti":{"1":{"x":710,"y":700,"tipo_seduta":"sedia"},"2":{"x":710,"y":680,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":730,"y":700,"tipo_seduta":"sgabello"}}}}},"2":{"fila":{"1":{"posti":{"1":{"x":740,"y":570,"tipo_seduta":"sedia"},"2":{"x":740,"y":550,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":760,"y":570,"tipo_seduta":"sgabello"},"2":{"x":760,"y":550,"tipo_seduta":"sgabello"}}}}},"3":{"fila":{"1":{"posti":{"1":{"x":740,"y":470,"tipo_seduta":"sedia"},"2":{"x":730,"y":440,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":760,"y":470,"tipo_seduta":"sgabello"},"2":{"x":750,"y":440,"tipo_seduta":"sgabello"}}}}},"4":{"fila":{"1":{"posti":{"1":{"x":700,"y":360,"tipo_seduta":"sedia"},"2":{"x":690,"y":340,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":720,"y":350,"tipo_seduta":"sgabello"},"2":{"x":710,"y":330,"tipo_seduta":"sgabello"}}}}},"5":{"fila":{"1":{"posti":{"1":{"x":620,"y":290,"tipo_seduta":"sedia"},"2":{"x":600,"y":280,"tipo_seduta":"sedia"},"3":{"x":580,"y":270,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":630,"y":270,"tipo_seduta":"sedia"},"2":{"x":610,"y":260,"tipo_seduta":"sedia"},"3":{"x":590,"y":250,"tipo_seduta":"sedia"}}}}},"7":{"fila":{"1":{"posti":{"1":{"x":520,"y":260,"tipo_seduta":"sedia"},"2":{"x":500,"y":260,"tipo_seduta":"sedia"},"3":{"x":480,"y":260,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":520,"y":240,"tipo_seduta":"sedia"},"2":{"x":500,"y":240,"tipo_seduta":"sedia"},"3":{"x":480,"y":240,"tipo_seduta":"sedia"}}}}},"8":{"fila":{"1":{"posti":{"1":{"x":410,"y":275,"tipo_seduta":"sedia"},"2":{"x":390,"y":285,"tipo_seduta":"sedia"},"3":{"x":370,"y":295,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":400,"y":255,"tipo_seduta":"sedia"},"2":{"x":380,"y":265,"tipo_seduta":"sedia"},"3":{"x":360,"y":275,"tipo_seduta":"sedia"}}}}},"9":{"fila":{"1":{"posti":{"1":{"x":340,"y":320,"tipo_seduta":"sedia"},"2":{"x":325,"y":330,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":330,"y":300,"tipo_seduta":"sgabello"},"2":{"x":315,"y":310,"tipo_seduta":"sgabello"}}}}},"10":{"fila":{"1":{"posti":{"1":{"x":270,"y":420,"tipo_seduta":"sedia"},"2":{"x":265,"y":450,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":250,"y":420,"tipo_seduta":"sgabello"},"2":{"x":245,"y":450,"tipo_seduta":"sgabello"}}}}},"11":{"fila":{"1":{"posti":{"1":{"x":260,"y":550,"tipo_seduta":"sedia"},"2":{"x":260,"y":580,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":240,"y":550,"tipo_seduta":"sgabello"},"2":{"x":240,"y":580,"tipo_seduta":"sgabello"}}}}},"12":{"fila":{"1":{"posti":{"1":{"x":290,"y":690,"tipo_seduta":"sedia"},"2":{"x":300,"y":720,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":280,"y":710,"tipo_seduta":"sgabello"}}}}}}},"II Ordine":{"palco":{"1":{"fila":{"1":{"posti":{"1":{"x":790,"y":690},"2":{"x":790,"y":670}}}}},"2":{"fila":{"1":{"posti":{"1":{"x":810,"y":570},"2":{"x":810,"y":550}}}}},"3":{"fila":{"1":{"posti":{"1":{"x":815,"y":440},"2":{"x":810,"y":420}}}}},"4":{"fila":{"1":{"posti":{"1":{"x":760,"y":320},"2":{"x":750,"y":300}}},"2":{"posti":{"1":{"x":770,"y":300}}}}},"5":{"fila":{"1":{"posti":{"1":{"x":660,"y":240},"2":{"x":640,"y":230}}},"2":{"posti":{"1":{"x":650,"y":210}}}}},"6":{"fila":{"1":{"posti":{"1":{"x":580,"y":200,"tipo_seduta":"sedia"},"2":{"x":567,"y":200,"tipo_seduta":"sedia"},"3":{"x":554,"y":200,"tipo_seduta":"sedia"},"4":{"x":541,"y":200,"tipo_seduta":"sedia"},"5":{"x":528,"y":200,"tipo_seduta":"sedia"},"6":{"x":515,"y":200,"tipo_seduta":"sedia"},"7":{"x":502,"y":200,"tipo_seduta":"sedia"},"8":{"x":489,"y":200,"tipo_seduta":"sedia"},"9":{"x":476,"y":200,"tipo_seduta":"sedia"},"10":{"x":463,"y":200,"tipo_seduta":"sedia"},"11":{"x":450,"y":200,"tipo_seduta":"sedia"},"12":{"x":437,"y":200,"tipo_seduta":"sedia"},"13":{"x":424,"y":200,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":580,"y":185,"tipo_seduta":"sedia"},"2":{"x":567,"y":185,"tipo_seduta":"sedia"},"3":{"x":554,"y":185,"tipo_seduta":"sedia"},"4":{"x":541,"y":185,"tipo_seduta":"sedia"},"5":{"x":528,"y":185,"tipo_seduta":"sedia"},"6":{"x":515,"y":185,"tipo_seduta":"sedia"},"7":{"x":502,"y":185,"tipo_seduta":"sedia"},"8":{"x":489,"y":185,"tipo_seduta":"sedia"},"9":{"x":476,"y":185,"tipo_seduta":"sedia"},"10":{"x":463,"y":185,"tipo_seduta":"sedia"},"11":{"x":450,"y":185,"tipo_seduta":"sedia"},"12":{"x":437,"y":185,"tipo_seduta":"sedia"},"13":{"x":424,"y":185,"tipo_seduta":"sedia"}}},"3":{"posti":{"1":{"x":580,"y":170,"tipo_seduta":"sedia"},"2":{"x":567,"y":170,"tipo_seduta":"sedia"},"3":{"x":554,"y":170,"tipo_seduta":"sedia"},"4":{"x":541,"y":170,"tipo_seduta":"sedia"},"5":{"x":528,"y":170,"tipo_seduta":"sedia"},"6":{"x":515,"y":170,"tipo_seduta":"sedia"},"7":{"x":502,"y":170,"tipo_seduta":"sedia"},"8":{"x":489,"y":170,"tipo_seduta":"sedia"},"9":{"x":476,"y":170,"tipo_seduta":"sedia"},"10":{"x":463,"y":170,"tipo_seduta":"sedia"},"11":{"x":450,"y":170,"tipo_seduta":"sedia"},"12":{"x":437,"y":170,"tipo_seduta":"sedia"},"13":{"x":424,"y":170,"tipo_seduta":"sedia"}}}}},"7":{"fila":{"1":{"posti":{"1":{"x":350,"y":230,"tipo_seduta":"sedia"},"2":{"x":330,"y":240,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":330,"y":220,"tipo_seduta":"sgabello"}}}}},"8":{"fila":{"1":{"posti":{"1":{"x":260,"y":290,"tipo_seduta":"sedia"},"2":{"x":250,"y":310,"tipo_seduta":"sedia"}}},"2":{"posti":{"1":{"x":240,"y":290,"tipo_seduta":"sgabello"}}}}},"9":{"fila":{"1":{"posti":{"1":{"x":180,"y":420,"tipo_seduta":"sedia"},"2":{"x":180,"y":440,"tipo_seduta":"sedia"}}}}},"10":{"fila":{"1":{"posti":{"1":{"x":180,"y":550,"tipo_seduta":"sedia"},"2":{"x":180,"y":570,"tipo_seduta":"sedia"}}}}},"11":{"fila":{"1":{"posti":{"1":{"x":200,"y":680,"tipo_seduta":"sedia"},"2":{"x":200,"y":700,"tipo_seduta":"sedia"}}}}}}},"III Ordine":{"palco":{"2":{"fila":{"1":{"posti":{"1":{"x":890,"y":540,"tipo_seduta":"sgabello","visibilita_ridotta":true},"2":{"x":890,"y":520,"tipo_seduta":"sgabello","visibilita_ridotta":true}}}}},"3":{"fila":{"1":{"posti":{"1":{"x":870,"y":400,"tipo_seduta":"sgabello","visibilita_ridotta":true},"2":{"x":860,"y":380,"tipo_seduta":"sgabello","visibilita_ridotta":true}}}}},"4":{"fila":{"1":{"posti":{"1":{"x":800,"y":270,"tipo_seduta":"sgabello"},"2":{"x":780,"y":250,"tipo_seduta":"sgabello"}}}}},"5":{"fila":{"1":{"posti":{"1":{"x":680,"y":170,"tipo_seduta":"sgabello"},"2":{"x":660,"y":160,"tipo_seduta":"sgabello"}}}}},"6":[{"non_numerato":true,"posti_totali":36,"posti_prenotati":0,"posti_pagati":0}],"7":{"fila":{"1":{"posti":{"1":{"x":330,"y":160,"tipo_seduta":"sgabello"},"2":{"x":310,"y":170,"tipo_seduta":"sgabello"}}},"2":{"posti":{"1":{"x":310,"y":150,"tipo_seduta":"sgabello"}}}}},"8":{"fila":{"1":{"posti":{"1":{"x":240,"y":210,"tipo_seduta":"sgabello"},"2":{"x":220,"y":230,"tipo_seduta":"sgabello"}}}}},"9":{"fila":{"1":{"posti":{"1":{"x":150,"y":350,"tipo_seduta":"sgabello","visibilita_ridotta":true},"2":{"x":140,"y":380,"tipo_seduta":"sgabello","visibilita_ridotta":true}}}}},"10":{"fila":{"1":{"posti":{"1":{"x":120,"y":500,"tipo_seduta":"sgabello","visibilita_ridotta":true},"2":{"x":120,"y":530,"tipo_seduta":"sgabello","visibilita_ridotta":true}}}}}}}}                if(Yii::$app->request->isPost){            $dati                       = Yii::$app->request->post("dati");            $prenotazione = Yii::$app->request->post("prenotazione");                        $prenotazione_esistente = IltPrenotazioni::find()->where(['email' => $dati['email'], 'spettacolo' => $spettacolo_id])->one();                        $res_prenotazioni = $postazioni->prenotazione(                $prenotazione,                !is_null($prenotazione_esistente)?json_decode($prenotazione_esistente->prenotazione, true):null,                $dati,                 $spettacolo_id,                Yii::$app->request->post('tipo-prenotazione')??\backend\models\Prenotazioni::STATO_NOT_PAYED            );                        //Salvo i dati della prenotazione            $model->piantina = $res_prenotazioni['piantina'];            $model->save();                        if(!is_null($prenotazione_esistente)){                $prenotazione_esistente->prenotazione = $res_prenotazioni['prenotazione_posti_utente'];                $prenotazione_esistente->save();            }else{//creo una nuova prenotazione                $nuova_prenotazione_obj = new IltPrenotazioni();                $nuova_prenotazione_obj->nome       = $dati['nome'];                $nuova_prenotazione_obj->cognome    = $dati['cognome'];                $nuova_prenotazione_obj->email      = $dati['email'];                $nuova_prenotazione_obj->cellulare  = $dati['cellulare'];                $nuova_prenotazione_obj->spettacolo = $spettacolo_id;                $nuova_prenotazione_obj->pagato     = IltPrenotazioni::NON_PAGATO;                $nuova_prenotazione_obj->prenotazione = $res_prenotazioni['prenotazione_posti_utente'];                $nuova_prenotazione_obj->save();               }                        //Fine salvataggio dei dati            Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione salvata con successo'));            return $this->redirect(['iloveteatro/prenotazione-ticket', 'spettacolo_id' => $spettacolo_id]);        }                return $this->render('ticket/nuova-prenotazione', [            'model'         => $model,            'postazioni'    => $postazioni,        ]);    }    /**     * Visualizza una prenotazione per gestirla.     *      * @param int $spettacolo_id     * @return mixed    */    public function actionShowTicket($email, $spettacolo_id){        $prenotazioni = IltPrenotazioni::find()                            ->where(['email' => $email])                            ->andWhere(['spettacolo' => $spettacolo_id])                            ->orderBy(['cognome' => SORT_ASC, 'nome' => SORT_ASC])                            ->all();        //Seleziono tutte le prenotazioni dello spettacolo        $tutte_le_prenotazioni = \app\models\IltSpettacolo::find()                                ->where(['festival' => IltFestival::find()->orderBy(['anno' => SORT_DESC])->one()->id])                                ->andWhere('data >= :data', [':data' => date('Y-m-d')])                                ->andWhere(['id' => $spettacolo_id])                                ->orderBy(['data' => SORT_ASC])                                ->all();        $spettacolo = $this->findModelSpettacolo($spettacolo_id);                if(Yii::$app->request->isPost){            $postazioni             = new Postazioni(json_decode($spettacolo->piantina));            $prenotazioni_da_cancellare = [];                        //Se devo eliminare delle prenotazioni            if(Yii::$app->request->post("reservations-delete") !== null){                //Trasformo i dati inviati tramite post                //nel JSON delle prenotazioni                foreach (Yii::$app->request->post('prenotazione') as $k => $v){                    foreach ($v['nome'] as $key => $prenotazione){                        if(isset($v['fila'])){                            $prenotazioni_da_cancellare[$k]['file'][$v['fila'][$key]]['posti'][] = $v['posto'][$key];                        }                    }                }                //--------------------------------------------------------------------------------------------------------                                $prenotazioni_da_cancellare = json_encode($prenotazioni_da_cancellare);                                $prenotazioni_aggiornate = $postazioni->cancellaPrenotazione($prenotazioni_da_cancellare, $prenotazioni[0]->prenotazione);                                $prenotazioni[0]->prenotazione = json_encode($prenotazioni_aggiornate['prenotazioni']);                $spettacolo->piantina = json_encode($prenotazioni_aggiornate['posti']);                if($prenotazioni[0]->save() && $spettacolo->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione cancellata con successo'));                }                //Rimuovo la prenotazione se risultano cancellate tutte le prenotazioni                if(is_null($prenotazioni_aggiornate['prenotazioni'])){                    if($prenotazioni[0]->delete()){                        Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione cancellata con successo'));                                                return $this->redirect(['prenotazioni', 'spettacolo_id' => $spettacolo_id]);                    }                }            }else{//Se sto inserendo una nuova prenotazione                $dati                   = Yii::$app->request->post("dati");                $prenotazione           = Yii::$app->request->post("prenotazione");                $prenotazione_esistente = IltPrenotazioni::find()->where(['email' => $dati['email'], 'spettacolo' => $spettacolo_id])->one();                                $res_prenotazioni = $postazioni->prenotazione(                    $prenotazione,                    !is_null($prenotazione_esistente)?json_decode($prenotazione_esistente->prenotazione, true):null                );                //Salvo i dati della prenotazione                $spettacolo->piantina = $res_prenotazioni['piantina'];                if(!$spettacolo->save()){                    Yii::$app->session->setFlash('success', Yii::t('app', 'Errore nella prenotazione, contattare un amministratore.'));                }                if(!is_null($prenotazione_esistente)){                    $prenotazione_esistente->prenotazione = $res_prenotazioni['prenotazione_posti_utente'];                    if(!$prenotazione_esistente->save()){                        Yii::$app->session->setFlash('success', Yii::t('app', 'Errore nella prenotazione, contattare un amministratore.'));                    }else{                        Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione salvata con successo'));                    }                }else{//creo una nuova prenotazione                    $nuova_prenotazione_obj = new IltPrenotazioni();                    $nuova_prenotazione_obj->nome       = $dati['nome'];                    $nuova_prenotazione_obj->cognome    = $dati['cognome'];                    $nuova_prenotazione_obj->email      = $dati['email'];                    $nuova_prenotazione_obj->cellulare  = $dati['cellulare'];                    $nuova_prenotazione_obj->spettacolo = $spettacolo_id;                    $nuova_prenotazione_obj->pagato     = IltPrenotazioni::NON_PAGATO;                    $nuova_prenotazione_obj->prenotazione = $res_prenotazioni['prenotazione_posti_utente'];                    $nuova_prenotazione_obj->save();                    Yii::$app->session->setFlash('success', Yii::t('app', 'Prenotazione salvata con successo'));                }                //Fine salvataggio dei dati            }                        return $this->redirect(['show-ticket', 'email' => $email, 'spettacolo_id' => $spettacolo_id]);                    }                /*echo "<pre>";        print_r(json_decode($prenotazioni[0]->prenotazione, true));        echo "<br />";        print_r(json_decode(json_encode(                                array_merge(                                    json_decode($prenotazioni[0]->prenotazione, true),                                    json_decode($prenotazioni[0]->abbonamento, true)??[]                                )                            ), true));        echo "</pre>";        return;*/        $postazioni = new Postazioni(                            json_decode($spettacolo->piantina),                            json_encode(                                array_merge(                                    json_decode($prenotazioni[0]->prenotazione, true)??[],                                    json_decode($prenotazioni[0]->abbonamento, true)??[]                                )                            )        );        /*$postazioni = new Postazioni(                            json_decode($spettacolo->piantina),                            json_decode($prenotazioni[0]->abbonamento, true)        );*/        /*$postazioni->get(false);        return;*/                                //Conto il numero totale di posti prenotati        $totali         = IltPrenotazioni::totali($prenotazioni, $spettacolo->piantina);        $nOfSeatState   = $totali['nOfSeatState'];        //------------------------------------------------------------                               return $this->render('ticket/show-prenotazione', [            //Dati dello spettacolo            'spettacolo'    => $spettacolo,            //Elenco delle prenotazioni registrate            //Usiamo l'indice 0 perché esiste un unico riscontro in base all'email            'prenotazioni'  => $prenotazioni[0],            //Mappa del teatro            'postazioni'    => $postazioni,            'email'         => $email,            //Codice dello spettacolo            'spettacolo_id' => $spettacolo_id,            //Tutte le prenotazioni presenti nel sistema per lo spettacolo            'tutte_le_prenotazioni' => $tutte_le_prenotazioni,            //Stato dei posti            'nOfSeatState' => $nOfSeatState,        ]);            }        public function actionSubscription(){                if(Yii::$app->request->isPost){            $spettacoli = \app\models\IltSpettacolo::find()                            ->where(['festival' => IltFestival::find()->orderBy(['anno' => SORT_DESC])->one()->id])                            ->orderBy(['data' => SORT_ASC])                            ->all();            $dati       = Yii::$app->request->post("dati");                        foreach ($spettacoli as $key => $spettacolo){                $model = $this->findModelSpettacolo($spettacolo->id);                $postazioni = new Postazioni(json_decode($model->piantina));                $prenotazione = Yii::$app->request->post("prenotazione");                $prenotazione_esistente = IltPrenotazioni::find()->where(['email' => $dati['email'], 'spettacolo' => $model->id])->one();                                $res_abbonamento = $postazioni->abbonamento(                    $prenotazione,                    !is_null($prenotazione_esistente)?json_decode($prenotazione_esistente->prenotazione, true):null                );                                                $model->piantina = $res_abbonamento['piantina'];                $model->save();                                $nuova_prenotazione_obj = "";                if(!is_null($prenotazione_esistente)){                    $prenotazione_esistente->abbonamento = $res_abbonamento['prenotazione_posti_utente'];                    $prenotazione_esistente->save();                }else{//creo una nuova prenotazione                    $nuova_prenotazione_obj = new IltPrenotazioni();                    $nuova_prenotazione_obj->nome       = $dati['nome'];                    $nuova_prenotazione_obj->cognome    = $dati['cognome'];                    $nuova_prenotazione_obj->email      = $dati['email'];                    $nuova_prenotazione_obj->cellulare  = $dati['cellulare']?:"000000000";                    $nuova_prenotazione_obj->spettacolo = $model->id;                    $nuova_prenotazione_obj->pagato     = IltPrenotazioni::NON_PAGATO;//Non più usato dalla versione del 2024                    $nuova_prenotazione_obj->abbonamento = $res_abbonamento['prenotazione_posti_utente'];                    $nuova_prenotazione_obj->save();                   }            }                        Yii::$app->session->setFlash('success', Yii::t('app', 'Abbonamento salvato con successo'));            return $this->redirect(['subscription']);        }                $tutte_le_prenotazioni = \app\models\IltSpettacolo::find()                                ->where(['festival' => IltFestival::find()->orderBy(['anno' => SORT_DESC])->one()->id])                                ->andWhere('data >= :data', [':data' => date('Y-m-d')])                                ->orderBy(['data' => SORT_ASC])                                ->all();                $prenotazioni_piantina = [];        foreach ($tutte_le_prenotazioni as $k => $v_prenotazioni){            $prenotazioni = json_decode($v_prenotazioni->piantina, true);                        foreach ($prenotazioni as $k_p => $v_p){                if(isset($v_p['file'])){                    foreach ($v_p['file'] as $k_fila => $v_fila){                        if(isset($v_fila['posti'])){                            foreach ($v_fila['posti'] as $k_posto => $posto_info){                                if(isset($prenotazioni[$k_p]['file'][$k_fila]['posti'][$k_posto]['stato'])){                                    $posto_info['stato'] = Postazioni::STATO_NOT_PAYED;                                }                                $prenotazioni_piantina[$k_p]['file'][$k_fila]['posti'][$k_posto] = $posto_info;                            }                        }                    }                }            }        }        $prenotazioni_piantina = json_encode($prenotazioni_piantina);                //return;        $postazioni = new Postazioni(            json_decode($prenotazioni_piantina)        );                return $this->render('ticket/subscription', [            'postazioni'    => $postazioni,        ]);    }    /**     * Festival programming     *      * @return mixed     */    public function actionProgramming() {        $dataProvider = new \yii\data\ActiveDataProvider([            'query' => IltSpettacolo::find()->where(['festival' => IltFestival::find()->orderBy(['anno' => SORT_DESC])->one()->id??0]),            'pagination' => [                'pageSize' => 10,            ],            'sort' => [                'defaultOrder' => [                    'data' => SORT_ASC,                ]            ],        ]);        return $this->render('programming/index', [            'dataProvider' => $dataProvider,        ]);    }    /**     * Create new show     *      * @param int $id     */    public function actionShowCreate(){        $model = new IltSpettacolo();        $festival = IltFestival::find()->orderBy(['anno' => SORT_DESC])->limit(1)->one();        if(Yii::$app->request->isPost){                        if($model->load(Yii::$app->request->post())){                $model->festival = $festival->id;                $banner = UploadedFile::getInstance($model, 'banner');                if($banner <> ""){                    $filename = md5($banner->baseName).md5(date('YmdHmi')). '.' . $banner->extension;                    //$banner->saveAs("iloveteatro/pdf_uploads/".$filename);                    $model->banner = Yii::$app->params['site_protocol'].Yii::$app->params['backendWeb']                                            .DIRECTORY_SEPARATOR.Yii::$app->params['image_upload_path']. $filename;                    $banner->saveAs(Yii::$app->params['image_upload_path'].$filename);                }                $locandina = UploadedFile::getInstance($model, 'locandina');                if($locandina <> ""){                    $filename = md5($banner->baseName).md5(date('YmdHmi')). '.' . $banner->extension;                    $model->locandina = Yii::$app->params['site_protocol'].Yii::$app->params['backendWeb']                                            .Yii::$app->params['image_upload_path']. $filename;                    $locandina->saveAs(Yii::$app->params['image_upload_path'].$filename);                }                if($model->save()){                    return $this->redirect(['/iloveteatro/view-show', 'id' => $model->id]);                }            }        }        return $this->render('programming/create', ['model' => $model]);    }        /**     * Update a show     *      * @param int $id     */    public function actionViewShow($id){        $model = $this->findModelSpettacolo($id);        $oldLocandina = $model->locandina;        $oldBanner = $model->banner;        if(Yii::$app->request->isPost){            if($model->load(Yii::$app->request->post())){                $model->banner = $oldBanner;                $model->locandina = $oldLocandina;                $banner = UploadedFile::getInstance($model, 'banner');                if($banner <> ""){                    $filename = md5($banner->baseName).md5(date('YmdHmi')). '.' . $banner->extension;                    //$banner->saveAs("iloveteatro/pdf_uploads/".$filename);                    $model->banner = Yii::$app->params['site_protocol'].Yii::$app->params['backendWeb']                                            .DIRECTORY_SEPARATOR.Yii::$app->params['image_upload_path']. $filename;                    $banner->saveAs(Yii::$app->params['image_upload_path'].$filename);                }else{                }                                $locandina = UploadedFile::getInstance($model, 'locandina');                if($locandina <> ""){                    $filename = md5($locandina->baseName).md5(date('YmdHmi')). '.' . $locandina->extension;                    $model->locandina = Yii::$app->params['site_protocol'].Yii::$app->params['backendWeb']                                            .Yii::$app->params['image_upload_path']. $filename;                    $locandina->saveAs(Yii::$app->params['image_upload_path'].$filename);                }                if($model->save()){                    return $this->redirect(['/iloveteatro/view-show', 'id' => $id]);                }            }        }        return $this->render('programming/show', [            'model' => $model,        ]);    }    /**     * Delete a show     *      * @param int $id     * @return mixed     */    public function actionDeleteShow($id){        $this->findModelSpettacolo($id)->delete();        Yii::$app->session->setFlash('success', Yii::t('app', 'Spettacolo rimosso con successo dalla programmazione'));        return $this->redirect(['/iloveteatro/programming']);    }            /**     * Visualizza il grafico delle vendite dei singoli spettacoli     *      * @param int $id Codice che indica quale grafico visualizzare     * @return type     */    public function actionChart($id = 0){        $totalPlace = \app\models\IltPosto::find()->count();        $tmp = IltSpettacolo::find()->asArray()->all();        $shows = [];        $buys = [];        foreach ($tmp as $k => $v){                        if(!is_null(IltSpettacolo::find()->where(['id' => $v['id']])->andWhere(['festival' => IltFestival::find()->orderBy(['anno' => SORT_DESC])->one()->id])->one())){                $shows[] = [                        "'".$v['spettacolo']."'",                        IltPrenotazioni::find()                            ->where(['spettacolo' => $v['id']])                            ->andWhere(['pagato' => IltPrenotazioni::PAGATO])                            ->count()                    ];            }                            }        if($id == 0) return $this->getAllChart($totalPlace, $shows, $buys);    }    /**     * Displayed general graphics     */    public function getAllChart($totalPlace, $shows, $buys){        return $this->render('charts/all', [            'totalPlace' => $totalPlace,            'shows' => $shows,            'buys' => $buys,        ]);    }        /**     * Finds the Articoli model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Allegati the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelArticoli($id)    {        if (($model = \backend\models\IltArticoli::findOne(['id' => $id])) !== null) {            return $model;        }                throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Articoli model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Allegati the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelFestival($id)    {        if (($model = \backend\models\IltFestival::findOne(['id' => $id])) !== null) {            return $model;        }                throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Categoria model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Allegati the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelCategoria($id)    {        if (($model = \backend\models\IltCategorie::findOne(['id' => $id])) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }        /**     * Finds the Media model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelMedia($id)    {        if (($model = Media::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Media model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelAlbum($id)    {        if (($model = IltAlbum::findOne($id)) !== null) {            return $model;        }                throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }        /**     * Finds the Media model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelFoto($id)    {        if (($model = IltFoto::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Media model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelIscrizioni($id)    {        if (($model = IltIscrizioni::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Media model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelSpettacolo($id)    {        if (($model = IltSpettacolo::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }    /**     * Finds the Ticket model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param int $id ID     * @return Media the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModelPrenotazione($id)    {        if (($model = IltPrenotazioni::findOne($id)) !== null) {            return $model;        }                throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));    }}